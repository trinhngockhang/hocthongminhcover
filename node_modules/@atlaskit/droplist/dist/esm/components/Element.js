import _extends from 'babel-runtime/helpers/extends';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { PureComponent } from 'react';
import { Anchor, Span } from '../styled/Item';

export var supportsVoiceOver = /Mac OS X/.test(navigator.userAgent);

export var ariaRoles = {
  checkbox: supportsVoiceOver ? 'checkbox' : 'menuitemcheckbox',
  link: 'menuitem',
  option: 'option',
  radio: supportsVoiceOver ? 'radio' : 'menuitemradio'
};
export var baseTypes = {
  default: 'link',
  values: ['link', 'radio', 'checkbox', 'option']
};

var Element = function (_PureComponent) {
  _inherits(Element, _PureComponent);

  function Element() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Element);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Element.__proto__ || _Object$getPrototypeOf(Element)).call.apply(_ref, [this].concat(args))), _this), _this.handleMouseDown = function (e) {
      e.preventDefault();
      _this.props.handleMouseDown();
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }
  // this prevents the focus ring from appearing when the element is clicked.
  // It doesn't interfere with the onClick handler


  _createClass(Element, [{
    key: 'render',
    value: function render() {
      var props = this.props;
      var isActive = props.isActive,
          isChecked = props.isChecked,
          isDisabled = props.isDisabled,
          isFocused = props.isFocused,
          isHidden = props.isHidden,
          isSelected = props.isSelected,
          isPrimary = props.isPrimary;

      var type = this.props.type || '';
      var appearanceProps = {
        isActive: isActive,
        isChecked: isChecked,
        isDisabled: isDisabled,
        isFocused: isFocused,
        isHidden: isHidden,
        isSelected: isSelected,
        isPrimary: isPrimary
      };

      var ariaProps = {
        'aria-checked': !!isChecked,
        'aria-disabled': !!isDisabled,
        'aria-hidden': !!isHidden,
        'aria-selected': !!isSelected
      };
      var commonProps = {
        'data-role': 'droplistItem',
        onClick: props.handleClick,
        onKeyPress: props.handleKeyPress,
        onMouseDown: this.handleMouseDown,
        onMouseOut: props.handleMouseOut,
        onMouseOver: props.handleMouseOver,
        onMouseUp: props.handleMouseUp,
        role: ariaRoles[type],
        title: props.title,
        tabIndex: props.type === 'option' ? null : 0
      };
      var testingProps = process.env.NODE_ENV === 'test' ? {
        'data-test-active': isActive,
        'data-test-checked': isChecked,
        'data-test-disabled': isDisabled,
        'data-test-hidden': isHidden,
        'data-test-selected': isSelected
      } : {};
      var consolidatedProps = _extends({}, appearanceProps, ariaProps, commonProps, testingProps);

      if (props.href && !isDisabled) {
        return React.createElement(
          Anchor,
          _extends({ href: props.href, target: props.target }, consolidatedProps),
          props.children
        );
      }

      return React.createElement(
        Span,
        consolidatedProps,
        props.children
      );
    }
  }]);

  return Element;
}(PureComponent);

export default Element;