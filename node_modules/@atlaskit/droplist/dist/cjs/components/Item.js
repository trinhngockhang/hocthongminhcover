'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _radio = require('@atlaskit/icon/glyph/radio');

var _radio2 = _interopRequireDefault(_radio);

var _checkbox = require('@atlaskit/icon/glyph/checkbox');

var _checkbox2 = _interopRequireDefault(_checkbox);

var _tooltip = require('@atlaskit/tooltip');

var _tooltip2 = _interopRequireDefault(_tooltip);

var _Item = require('../styled/Item');

var _utils = require('../utils');

var _Element = require('./Element');

var _Element2 = _interopRequireDefault(_Element);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var inputTypes = { checkbox: _checkbox2.default, radio: _radio2.default };

var Item = function (_PureComponent) {
  (0, _inherits3.default)(Item, _PureComponent);

  function Item() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, Item);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Item.__proto__ || (0, _getPrototypeOf2.default)(Item)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      isHovered: false,
      isPressed: false
    }, _this.componentDidMount = function () {
      return document.addEventListener('mouseup', _this.handleMouseUp);
    }, _this.componentWillUnmount = function () {
      return document.removeEventListener('mouseup', _this.handleMouseUp);
    }, _this.guardedActivate = function (event) {
      var _this$props = _this.props,
          isDisabled = _this$props.isDisabled,
          onActivate = _this$props.onActivate;


      if (!isDisabled && onActivate) onActivate({ item: _this, event: event });
    }, _this.handleClick = function (event) {
      return _this.guardedActivate(event);
    }, _this.handleKeyPress = function (event) {
      var keyIsValid = ['Enter', ' '].indexOf(event.key) > -1;

      if (keyIsValid) _this.guardedActivate(event);
    }, _this.handleMouseDown = function () {
      return _this.setState({ isPressed: true });
    }, _this.handleMouseUp = function () {
      return _this.setState({ isPressed: false });
    }, _this.handleMouseOut = function () {
      return _this.setState({ isHovered: false });
    }, _this.handleMouseOver = function () {
      return _this.setState({ isHovered: true });
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(Item, [{
    key: 'render',
    value: function render() {
      var props = this.props;
      var _state = this.state,
          isHovered = _state.isHovered,
          isPressed = _state.isPressed;


      var type = props.type || '';
      var hasInput = ['checkbox', 'radio'].indexOf(type) > -1;
      var Input = inputTypes[type];

      var appearanceProps = {
        isActive: props.type === 'link' && props.isActive || props.type === 'option' && props.isSelected,
        isChecked: ['checkbox', 'radio'].indexOf(type) > -1 && props.isChecked,
        isDisabled: props.isDisabled,
        isFocused: props.isFocused,
        isHidden: props.isHidden,
        isHovered: isHovered,
        isPressed: isPressed,
        isSelected: type === 'option' && props.isSelected,
        isPrimary: props.appearance === 'primary'
      };

      var element = _react2.default.createElement(
        _Element2.default,
        (0, _extends3.default)({}, appearanceProps, {
          handleClick: this.handleClick,
          handleKeyPress: this.handleKeyPress,
          handleMouseOut: this.handleMouseOut,
          handleMouseOver: this.handleMouseOver,
          handleMouseUp: this.handleMouseUp,
          handleMouseDown: this.handleMouseDown,
          href: props.href,
          target: props.target,
          title: props.title,
          type: props.type
        }),
        hasInput && _react2.default.createElement(
          _Item.InputWrapper,
          appearanceProps,
          _react2.default.createElement(Input, {
            label: '',
            primaryColor: (0, _utils.getInputBackground)(appearanceProps),
            secondaryColor: (0, _utils.getInputFill)(appearanceProps),
            size: 'medium'
          })
        ),
        !!props.elemBefore && _react2.default.createElement(
          _Item.Before,
          null,
          props.elemBefore
        ),
        _react2.default.createElement(
          _Item.ContentWrapper,
          null,
          _react2.default.createElement(
            _Item.Content,
            { allowMultiline: this.context.shouldAllowMultilineItems },
            props.children
          ),
          !!props.description && _react2.default.createElement(
            _Item.Description,
            null,
            props.description
          )
        ),
        !!props.elemAfter && _react2.default.createElement(
          _Item.After,
          null,
          props.elemAfter
        )
      );

      return _react2.default.createElement(
        'span',
        { role: 'presentation' },
        props.tooltipDescription ? _react2.default.createElement(
          _tooltip2.default,
          {
            content: props.tooltipDescription,
            position: props.tooltipPosition
          },
          element
        ) : element
      );
    }
  }]);
  return Item;
}(_react.PureComponent);

Item.defaultProps = {
  appearance: 'default',
  children: null,
  description: '',
  elemAfter: null,
  elemBefore: null,
  href: null,
  isActive: false,
  isChecked: false,
  isDisabled: false,
  isFocused: false,
  isHidden: false,
  isSelected: false,
  itemContext: 'menu',
  onActivate: function onActivate() {},
  target: null,
  title: null,
  tooltipDescription: null,
  tooltipPosition: 'right',
  type: 'link'
};
Item.contextTypes = {
  shouldAllowMultilineItems: _propTypes2.default.bool
};
exports.default = Item;