'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _layer = require('@atlaskit/layer');

var _layer2 = _interopRequireDefault(_layer);

var _spinner = require('@atlaskit/spinner');

var _spinner2 = _interopRequireDefault(_spinner);

var _styledComponents = require('styled-components');

var _theme = require('@atlaskit/theme');

var _Droplist = require('../styled/Droplist');

var _Droplist2 = _interopRequireDefault(_Droplist);

var _itemTheme = require('../theme/item-theme');

var _itemTheme2 = _interopRequireDefault(_itemTheme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var halfFocusRing = 1;

var dropOffset = '0 ' + (0, _theme.gridSize)() + 'px';

var Droplist = function (_Component) {
  (0, _inherits3.default)(Droplist, _Component);

  function Droplist() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, Droplist);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Droplist.__proto__ || (0, _getPrototypeOf2.default)(Droplist)).call.apply(_ref, [this].concat(args))), _this), _this.componentDidMount = function () {
      _this.setContentWidth();
      // We use a captured event here to avoid a radio or checkbox dropdown item firing its
      // click event first, which would cause a re-render of the element and prevent Droplist
      // from detecting the actual source of this original click event.
      document.addEventListener('click', _this.handleClickOutside, true);
      document.addEventListener('keydown', _this.handleEsc);
    }, _this.componentDidUpdate = function () {
      if (_this.props.isOpen) {
        _this.setContentWidth();
      }
    }, _this.componentWillUnmount = function () {
      document.removeEventListener('click', _this.handleClickOutside, true);
      document.removeEventListener('keydown', _this.handleEsc);
    }, _this.setContentWidth = function () {
      var _this2 = _this,
          dropContentRef = _this2.dropContentRef,
          triggerRef = _this2.triggerRef;
      var shouldFitContainer = _this.props.shouldFitContainer;

      // We need to manually set the content width to match the trigger width
      // if props.shouldFitContainer is true

      if (shouldFitContainer && dropContentRef && triggerRef) {
        dropContentRef.style.width = triggerRef.offsetWidth - halfFocusRing * 2 + 'px';
      }
    }, _this.handleEsc = function (event) {
      if (event.key === 'Escape') {
        _this.close(event);
      }
    }, _this.handleClickOutside = function (event) {
      if (_this.props.isOpen) {
        var domNode = _reactDom2.default.findDOMNode(_this); // eslint-disable-line react/no-find-dom-node

        if (!domNode ||
        // $FlowFixMe
        event.target instanceof Node && !domNode.contains(event.target)) {
          _this.close(event);
        }
      }
    }, _this.close = function (event) {
      if (_this.props.onOpenChange) {
        _this.props.onOpenChange({ isOpen: false, event: event });
      }
    }, _this.handleContentRef = function (ref) {
      _this.dropContentRef = ref;

      // If the dropdown has just been opened, we focus on the containing element so the
      // user can tab to the first dropdown item. We will only receive this ref if isOpen
      // is true or null, so no need to check for truthiness here.
      if (ref) {
        ref.focus();
      }
    }, _this.handleTriggerRef = function (ref) {
      _this.triggerRef = ref;
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(Droplist, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return { shouldAllowMultilineItems: this.props.shouldAllowMultilineItems };
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          appearance = _props.appearance,
          boundariesElement = _props.boundariesElement,
          children = _props.children,
          isLoading = _props.isLoading,
          isOpen = _props.isOpen,
          maxHeight = _props.maxHeight,
          onClick = _props.onClick,
          onKeyDown = _props.onKeyDown,
          position = _props.position,
          shouldFitContainer = _props.shouldFitContainer,
          shouldFlip = _props.shouldFlip,
          trigger = _props.trigger;


      var layerContent = isOpen ? _react2.default.createElement(
        _Droplist.Content,
        {
          'data-role': 'droplistContent',
          isTall: appearance === 'tall',
          innerRef: this.handleContentRef,
          maxHeight: maxHeight
        },
        isLoading ? _react2.default.createElement(
          _Droplist.SpinnerContainer,
          null,
          _react2.default.createElement(_spinner2.default, { size: 'small' })
        ) : _react2.default.createElement(
          _styledComponents.ThemeProvider,
          { theme: _itemTheme2.default },
          _react2.default.createElement(
            'div',
            null,
            children
          )
        )
      ) : null;

      return _react2.default.createElement(
        _Droplist2.default,
        { fit: shouldFitContainer, onClick: onClick, onKeyDown: onKeyDown },
        _react2.default.createElement(
          _layer2.default,
          {
            autoFlip: shouldFlip,
            boundariesElement: boundariesElement,
            content: layerContent,
            offset: dropOffset
            // $FlowFixMe
            , position: position
          },
          _react2.default.createElement(
            _Droplist.Trigger,
            { fit: shouldFitContainer, innerRef: this.handleTriggerRef },
            trigger
          )
        )
      );
    }
  }]);
  return Droplist;
}(_react.Component);

Droplist.defaultProps = {
  appearance: 'default',
  boundariesElement: 'viewport',
  children: null,
  isLoading: false,
  isOpen: false,
  onClick: function onClick() {},
  onKeyDown: function onKeyDown() {},
  onOpenChange: function onOpenChange() {},
  position: 'bottom left',
  shouldAllowMultilineItems: false,
  shouldFitContainer: false,
  shouldFlip: true,
  trigger: null
};
Droplist.childContextTypes = {
  shouldAllowMultilineItems: _propTypes2.default.bool
};
exports.default = Droplist;