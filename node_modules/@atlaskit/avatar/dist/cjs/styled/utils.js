'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSize = undefined;

var _taggedTemplateLiteral2 = require('babel-runtime/helpers/taggedTemplateLiteral');

var _taggedTemplateLiteral3 = _interopRequireDefault(_taggedTemplateLiteral2);

var _templateObject = (0, _taggedTemplateLiteral3.default)(['\n    ', ';\n    align-items: stretch;\n    background-color: ', ';\n    border: 0;\n    border-radius: ', ';\n    padding: ', ';\n    box-sizing: ', ';\n    cursor: ', ';\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    outline: ', ';\n    overflow: hidden;\n    pointer-events: ', ';\n    position: ', ';\n    transform: ', ';\n    transition: background-color ', ' ease-out;\n\n    a &,\n    button & {\n      cursor: pointer;\n    }\n\n    &::after {\n      background-color: ', ';\n      border-radius: ', ';\n      bottom: ', ';\n      content: \' \';\n      left: ', ';\n      opacity: ', ';\n      pointer-events: none;\n      position: absolute;\n      right: ', ';\n      top: ', ';\n      transition: opacity ', ';\n    }\n\n    &::-moz-focus-inner {\n      border: 0;\n      margin: 0;\n      padding: 0;\n    }\n  '], ['\n    ', ';\n    align-items: stretch;\n    background-color: ', ';\n    border: 0;\n    border-radius: ', ';\n    padding: ', ';\n    box-sizing: ', ';\n    cursor: ', ';\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    outline: ', ';\n    overflow: hidden;\n    pointer-events: ', ';\n    position: ', ';\n    transform: ', ';\n    transition: background-color ', ' ease-out;\n\n    a &,\n    button & {\n      cursor: pointer;\n    }\n\n    &::after {\n      background-color: ', ';\n      border-radius: ', ';\n      bottom: ', ';\n      content: \' \';\n      left: ', ';\n      opacity: ', ';\n      pointer-events: none;\n      position: absolute;\n      right: ', ';\n      top: ', ';\n      transition: opacity ', ';\n    }\n\n    &::-moz-focus-inner {\n      border: 0;\n      margin: 0;\n      padding: 0;\n    }\n  ']);

exports.getBorderRadius = getBorderRadius;
exports.getAvatarDimensions = getAvatarDimensions;
exports.getInnerStyles = getInnerStyles;

var _styledComponents = require('styled-components');

var _theme = require('@atlaskit/theme');

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var backgroundColorFocus = _theme.colors.B200;
var overlayColorDefault = 'transparent';
var overlayColorHover = _theme.colors.N70A;
var overlayColorSelected = _theme.colors.N200A;
var overlayColorDisabled = (0, _theme.themed)({
  light: 'rgba(255, 255, 255, 0.7)',
  dark: _theme.colors.DN80A
});

// "square" avatars are explicit
function getBorderRadius(props) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { includeBorderWidth: false };

  var borderWidth = config.includeBorderWidth ? _constants.BORDER_WIDTH[props.size] : 0;
  return props.appearance === 'circle' ? '50%' : _constants.AVATAR_RADIUS[props.size] + borderWidth + 'px';
}

var getSize = exports.getSize = function getSize(props) {
  return _constants.AVATAR_SIZES[props.size];
}; // for testing
function getAvatarDimensions(props) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    includeBorderWidth: false,
    sizeOnly: false
  };

  var borderWidth = config.includeBorderWidth ? _constants.BORDER_WIDTH[props.size] * 2 : 0;
  var size = _constants.AVATAR_SIZES[props.size] + borderWidth;

  return config.sizeOnly ? size : '\n    height: ' + size + 'px;\n    width: ' + size + 'px;\n  ';
}

// expose here for use with multiple element types
function getInnerStyles(props) {
  var boxSizing = 'content-box';
  var borderWidth = _constants.BORDER_WIDTH[props.size] + 'px';
  var isInteractive = Boolean(props.isInteractive || props.href || props.onClick);

  var backgroundColor = props.borderColor || _theme.colors.background;
  var cursor = 'default';
  var outline = 'none';
  var overlayShade = overlayColorDefault;
  var overlayOpacity = 0;
  var pointerEvents = 'auto';
  var position = 'static';
  var transform = 'translateZ(0)';
  var transitionDuration = '0s';

  // Interaction: Hover
  if (isInteractive && (props.isActive || props.isHover)) {
    overlayShade = overlayColorHover;
    overlayOpacity = 1;
  }

  // Interaction: Active
  if (isInteractive && props.isActive) {
    transform = 'scale(0.9)';
  }

  // Interaction: Focus
  if (isInteractive && props.isFocus && !props.isActive) {
    outline = 'none';
    backgroundColor = backgroundColorFocus;
    transitionDuration = _constants.TRANSITION_DURATION;
  }

  // Disabled
  if (props.isDisabled) {
    cursor = 'not-allowed';
    overlayShade = overlayColorDisabled;
    overlayOpacity = 1;
    pointerEvents = 'none';
  }

  // Interactive
  if (isInteractive) {
    cursor = 'pointer';
  }

  // Loading
  if (props.isSelected) {
    overlayShade = overlayColorSelected;
    overlayOpacity = 1;
  }

  // Stack
  if (props.stackIndex) {
    position = 'relative';
  }

  return (0, _styledComponents.css)(_templateObject, getAvatarDimensions, backgroundColor, function (p) {
    return getBorderRadius(p, { includeBorderWidth: true });
  }, borderWidth, boxSizing, cursor, outline, pointerEvents, position, transform, transitionDuration, overlayShade, getBorderRadius, borderWidth, borderWidth, overlayOpacity, borderWidth, borderWidth, _constants.TRANSITION_DURATION);
}