'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _tooltip = require('@atlaskit/tooltip');

var _tooltip2 = _interopRequireDefault(_tooltip);

var _constants = require('./constants');

var _Presence = require('./Presence');

var _Presence2 = _interopRequireDefault(_Presence);

var _AvatarImage = require('./AvatarImage');

var _AvatarImage2 = _interopRequireDefault(_AvatarImage);

var _Status = require('./Status');

var _Status2 = _interopRequireDefault(_Status);

var _Avatar = require('../styled/Avatar');

var _Avatar2 = _interopRequireDefault(_Avatar);

var _utils = require('../utils');

var _helpers = require('../helpers');

var _hoc = require('../hoc');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var warn = function warn(message) {
  if (process.env.NODE_ENV !== 'production') {
    console.warn(message); // eslint-disable-line no-console
  }
};

var Avatar = function (_Component) {
  (0, _inherits3.default)(Avatar, _Component);

  function Avatar() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, Avatar);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Avatar.__proto__ || (0, _getPrototypeOf2.default)(Avatar)).call.apply(_ref, [this].concat(args))), _this), _this.blur = function () {
      if (_this.ref) _this.ref.blur();
    }, _this.focus = function () {
      if (_this.ref) _this.ref.focus();
    }, _this.guardedClick = function (event) {
      var _this$props = _this.props,
          isDisabled = _this$props.isDisabled,
          onClick = _this$props.onClick;


      if (isDisabled || typeof onClick !== 'function') return;

      var item = _utils.omit.apply(undefined, [_this.props].concat((0, _toConsumableArray3.default)(_constants.propsOmittedFromClickData)));

      onClick({ item: item, event: event });
    }, _this.renderIcon = function () {
      var _this$props2 = _this.props,
          appearance = _this$props2.appearance,
          borderColor = _this$props2.borderColor,
          presence = _this$props2.presence,
          status = _this$props2.status;

      var showPresence = Boolean(presence);
      var showStatus = Boolean(status);

      // no icon needed
      if (!showStatus && !showPresence) {
        return null;
      }

      // cannot display both
      if (showStatus && showPresence) {
        warn('Avatar supports `presence` OR `status` properties, not both.');
        return null;
      }

      // only support particular sizes
      if (_constants.validIconSizes.indexOf(_this.props.size) === -1) {
        warn('Avatar size "' + String(_this.props.size) + '" does NOT support ' + (showPresence ? 'presence' : 'status'));
        return null;
      }

      // we can cast here because we already know that it is a valid icon size
      var size = _this.props.size;

      var indicator = function () {
        if (showPresence) {
          var customPresenceNode = (typeof presence === 'undefined' ? 'undefined' : (0, _typeof3.default)(presence)) === 'object' ? presence : null;

          return _react2.default.createElement(
            _Avatar.PresenceWrapper,
            { appearance: appearance, size: size },
            _react2.default.createElement(
              _Presence2.default,
              {
                borderColor: borderColor,
                presence: !customPresenceNode && presence,
                size: size
              },
              customPresenceNode
            )
          );
        }

        // showStatus
        return _react2.default.createElement(
          _Avatar.StatusWrapper,
          { appearance: appearance, size: size },
          _react2.default.createElement(_Status2.default, { status: status, borderColor: borderColor, size: size })
        );
      }();

      return indicator;
    }, _this.setRef = function (ref) {
      _this.ref = ref;
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  // expose blur/focus to consumers via ref


  // disallow click on disabled avatars
  // only return avatar data properties


  // enforce status / presence rules
  /* eslint-disable no-console */


  (0, _createClass3.default)(Avatar, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          appearance = _props.appearance,
          enableTooltip = _props.enableTooltip,
          name = _props.name,
          size = _props.size,
          src = _props.src,
          stackIndex = _props.stackIndex;

      // distill props from context, props, and state

      var enhancedProps = (0, _helpers.getProps)(this);

      // provide element type based on props
      // TODO: why not enhanced props?
      var Inner = (0, _helpers.getStyledAvatar)(this.props);

      var AvatarNode = _react2.default.createElement(
        _Avatar2.default,
        { size: size, stackIndex: stackIndex },
        _react2.default.createElement(
          Inner,
          (0, _extends3.default)({
            innerRef: this.setRef
          }, enhancedProps, {
            onClick: this.guardedClick
          }),
          _react2.default.createElement(_AvatarImage2.default, {
            alt: name,
            appearance: appearance,
            size: size,
            src: src
          })
        ),
        this.renderIcon()
      );

      return enableTooltip && name ? _react2.default.createElement(
        _tooltip2.default,
        { content: name },
        AvatarNode
      ) : AvatarNode;
    }
  }]);
  return Avatar;
}(_react.Component);

/**
 *  1. Higher order components seem to ignore default properties. Mapping
 *     `appearance` explicity here circumvents the issue.
 *  2. The withPseudoState HOC should remain generic so rather than pass on
 *     `enableTooltip` we map it to `isInteractive`.
 *  3. Handle keyboard/mouse events and pass props to the wrapped component:
 *     - isActive
 *     - isFocus
 *     - isHover
 */


Avatar.defaultProps = {
  appearance: 'circle',
  enableTooltip: true,
  size: 'medium'
};
exports.default = (0, _hoc.mapProps)({
  appearance: function appearance(props) {
    return props.appearance || Avatar.defaultProps.appearance;
  }, // 1
  isInteractive: function isInteractive(props) {
    return props.enableTooltip || Avatar.defaultProps.enableTooltip;
  } // 2
})((0, _hoc.withPseudoState)(Avatar)); // 3