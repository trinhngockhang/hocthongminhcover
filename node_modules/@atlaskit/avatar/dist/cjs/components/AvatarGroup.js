'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styledComponents = require('styled-components');

var _dropdownMenu = require('@atlaskit/dropdown-menu');

var _dropdownMenu2 = _interopRequireDefault(_dropdownMenu);

var _Avatar = require('./Avatar');

var _Avatar2 = _interopRequireDefault(_Avatar);

var _AvatarGroup = require('../styled/AvatarGroup');

var _MoreIndicator = require('../components/MoreIndicator');

var _MoreIndicator2 = _interopRequireDefault(_MoreIndicator);

var _itemTheme = require('../theme/itemTheme');

var _itemTheme2 = _interopRequireDefault(_itemTheme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var GROUP_COMPONENT = {
  grid: _AvatarGroup.Grid,
  stack: _AvatarGroup.Stack
};
/* eslint-disable react/no-array-index-key */

var MAX_COUNT = {
  grid: 11,
  stack: 5
};

var AvatarGroup = function (_Component) {
  (0, _inherits3.default)(AvatarGroup, _Component);

  function AvatarGroup() {
    (0, _classCallCheck3.default)(this, AvatarGroup);
    return (0, _possibleConstructorReturn3.default)(this, (AvatarGroup.__proto__ || (0, _getPrototypeOf2.default)(AvatarGroup)).apply(this, arguments));
  }

  (0, _createClass3.default)(AvatarGroup, [{
    key: 'renderMoreDropdown',
    value: function renderMoreDropdown(max, total) {
      var _props = this.props,
          appearance = _props.appearance,
          data = _props.data,
          borderColor = _props.borderColor,
          onMoreClick = _props.onMoreClick,
          onAvatarClick = _props.onAvatarClick,
          size = _props.size,
          boundariesElement = _props.boundariesElement;

      // bail if there's not enough items

      if (total <= max) return null;

      // prepare the button -- we'll use it twice
      var MoreButton = function MoreButton(props) {
        return _react2.default.createElement(_MoreIndicator2.default, (0, _extends3.default)({
          borderColor: borderColor,
          count: total - max,
          isInteractive: true,
          isStack: appearance === 'stack',
          size: size
        }, props));
      };

      // bail if the consumer wants to handle onClick
      if (typeof onMoreClick === 'function') {
        return _react2.default.createElement(MoreButton, { onClick: onMoreClick });
      }

      // crop and prepare the dropdown items
      var items = data.slice(max).map(function (avatar, index) {
        return _react2.default.createElement(
          _dropdownMenu.DropdownItem,
          {
            elemBefore: _react2.default.createElement(_Avatar2.default, (0, _extends3.default)({}, avatar, {
              borderColor: 'transparent',
              enableTooltip: false,
              size: 'small'
            })),
            href: avatar.href,
            key: index,
            onClick: onAvatarClick,
            rel: avatar.target ? 'noopener noreferrer' : null,
            target: avatar.target
          },
          avatar.name
        );
      });

      return _react2.default.createElement(
        _dropdownMenu2.default,
        {
          trigger: _react2.default.createElement(MoreButton, null),
          position: 'bottom right',
          boundariesElement: boundariesElement,
          shouldFlip: true
        },
        _react2.default.createElement(
          _styledComponents.ThemeProvider,
          { theme: _itemTheme2.default },
          _react2.default.createElement(
            _dropdownMenu.DropdownItemGroup,
            null,
            items
          )
        )
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          Item = _props2.avatar,
          appearance = _props2.appearance,
          borderColor = _props2.borderColor,
          data = _props2.data,
          maxCount = _props2.maxCount,
          onAvatarClick = _props2.onAvatarClick,
          size = _props2.size;
      // NOTE: conditionally defaulting the `maxCount` prop based on `appearance`

      var max = maxCount === 0 ? MAX_COUNT[appearance] : maxCount;
      var total = data.length;
      var Group = GROUP_COMPONENT[appearance];

      // Render (max - 1) avatars to leave space for moreIndicator
      var maxAvatar = total > max ? max - 1 : max;

      var items = data.slice(0, maxAvatar).map(function (avatar, idx) {
        return _react2.default.createElement(Item, (0, _extends3.default)({}, avatar, {
          borderColor: borderColor,
          groupAppearance: appearance,
          index: idx,
          key: idx,
          onClick: avatar.onClick || onAvatarClick,
          size: size,
          stackIndex: max - idx
        }));
      });

      return _react2.default.createElement(
        Group,
        { size: size },
        items,
        this.renderMoreDropdown(+maxAvatar, total)
      );
    }
  }]);
  return AvatarGroup;
}(_react.Component);

AvatarGroup.defaultProps = {
  appearance: 'stack',
  avatar: _Avatar2.default,
  maxCount: 0,
  size: 'medium'
};
exports.default = AvatarGroup;