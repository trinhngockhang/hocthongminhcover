'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _constants = require('./constants');

var _utils = require('../utils');

var _AvatarItem = require('../styled/AvatarItem');

var _helpers = require('../helpers');

var _hoc = require('../hoc');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable react/no-unused-prop-types */
var AvatarItem = function (_Component) {
  (0, _inherits3.default)(AvatarItem, _Component);

  function AvatarItem() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, AvatarItem);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = AvatarItem.__proto__ || (0, _getPrototypeOf2.default)(AvatarItem)).call.apply(_ref, [this].concat(args))), _this), _this.blur = function () {
      if (_this.node) _this.node.blur();
    }, _this.focus = function () {
      if (_this.node) _this.node.focus();
    }, _this.guardedClick = function (event) {
      var _this$props = _this.props,
          isDisabled = _this$props.isDisabled,
          onClick = _this$props.onClick;


      if (isDisabled || typeof onClick !== 'function') return;

      var item = _utils.omit.apply(undefined, [_this.props].concat((0, _toConsumableArray3.default)(_constants.propsOmittedFromClickData)));

      onClick({ item: item, event: event });
    }, _this.setNode = function (ref) {
      _this.node = ref;
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  // expose blur/focus to consumers via ref


  // disallow click on disabled avatars


  (0, _createClass3.default)(AvatarItem, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          avatar = _props.avatar,
          enableTextTruncate = _props.enableTextTruncate,
          primaryText = _props.primaryText,
          secondaryText = _props.secondaryText;

      // maintain the illusion of a mask around presence/status

      var borderColor = (0, _AvatarItem.getBackgroundColor)(this.props);

      // distill props from context, props, and state
      var enhancedProps = (0, _helpers.getProps)(this);

      // provide element type based on props
      var StyledComponent = (0, _helpers.getStyledAvatarItem)(this.props);

      return _react2.default.createElement(
        StyledComponent,
        (0, _extends3.default)({
          innerRef: this.setNode
        }, enhancedProps, {
          onClick: this.guardedClick
        }),
        (0, _react.cloneElement)(avatar, { borderColor: borderColor }),
        _react2.default.createElement(
          _AvatarItem.Content,
          { truncate: enableTextTruncate },
          _react2.default.createElement(
            _AvatarItem.PrimaryText,
            { truncate: enableTextTruncate },
            primaryText
          ),
          _react2.default.createElement(
            _AvatarItem.SecondaryText,
            { truncate: enableTextTruncate },
            secondaryText
          )
        )
      );
    }
  }]);
  return AvatarItem;
}(_react.Component);

AvatarItem.defaultProps = { enableTextTruncate: true };
exports.default = (0, _hoc.withPseudoState)(AvatarItem);