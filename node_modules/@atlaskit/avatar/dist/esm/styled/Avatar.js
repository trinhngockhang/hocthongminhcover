import _extends from 'babel-runtime/helpers/extends';
import _taggedTemplateLiteral from 'babel-runtime/helpers/taggedTemplateLiteral';

var _templateObject = _taggedTemplateLiteral(['\n  ', ';\n'], ['\n  ', ';\n']);

import React from 'react';

import styled from 'styled-components';
import { BORDER_WIDTH, ICON_OFFSET, SQUARE_ICON_OFFSET, ICON_SIZES } from './constants';

import { getAvatarDimensions, getInnerStyles } from './utils';

// OUTER WRAPPER
// eslint-disable-next-line react/prop-types


export default (function (_ref) {
  var children = _ref.children,
      size = _ref.size,
      stackIndex = _ref.stackIndex;

  var sizeValue = getAvatarDimensions({ size: size }, {
    includeBorderWidth: true,
    sizeOnly: true
  }) + 'px';
  return React.createElement(
    'div',
    {
      style: {
        display: 'inline-block',
        position: 'relative',
        outline: 0,
        width: sizeValue,
        height: sizeValue,
        zIndex: stackIndex
      }
    },
    children
  );
});

// INNER WRAPPER
export var Inner = styled.div(_templateObject, getInnerStyles);

// PRESENCE WRAPPER


// TODO: do not have all icon sizes!
var getPresenceLayout = function getPresenceLayout(_ref2) {
  var appearance = _ref2.appearance,
      size = _ref2.size;

  var presencePosition = appearance === 'square' ? -(BORDER_WIDTH[size] * 2) : ICON_OFFSET[size];
  var presenceSize = ICON_SIZES[size];

  return {
    bottom: presencePosition + 'px',
    height: presenceSize + 'px',
    right: presencePosition + 'px',
    width: presenceSize + 'px'
  };
};

export var PresenceWrapper = function PresenceWrapper(args) {
  return React.createElement(
    'span',
    {
      style: _extends({
        pointerEvents: 'none',
        position: 'absolute'
      }, getPresenceLayout(args))
    },
    args.children
  );
};

// STATUS WRAPPER
var getStatusLayout = function getStatusLayout(_ref3) {
  var appearance = _ref3.appearance,
      size = _ref3.size;

  var statusPosition = appearance === 'square' ? SQUARE_ICON_OFFSET[size] : ICON_OFFSET[size];
  var statusSize = ICON_SIZES[size];

  return {
    height: statusSize + 'px',
    right: statusPosition + 'px',
    top: statusPosition + 'px',
    width: statusSize + 'px'
  };
};

// eslint-disable-next-line react/prop-types
export var StatusWrapper = function StatusWrapper(args) {
  return React.createElement(
    'span',
    {
      style: _extends({
        position: 'absolute'
      }, getStatusLayout(args))
    },
    args.children
  );
};