import _extends from 'babel-runtime/helpers/extends';
import _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { cloneElement, Component } from 'react';

import { propsOmittedFromClickData } from './constants';
import { omit } from '../utils';
import { getBackgroundColor, Content, PrimaryText, SecondaryText } from '../styled/AvatarItem';
import { getProps, getStyledAvatarItem } from '../helpers';
import { withPseudoState } from '../hoc';

/* eslint-disable react/no-unused-prop-types */

var AvatarItem = function (_Component) {
  _inherits(AvatarItem, _Component);

  function AvatarItem() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, AvatarItem);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = AvatarItem.__proto__ || _Object$getPrototypeOf(AvatarItem)).call.apply(_ref, [this].concat(args))), _this), _this.blur = function () {
      if (_this.node) _this.node.blur();
    }, _this.focus = function () {
      if (_this.node) _this.node.focus();
    }, _this.guardedClick = function (event) {
      var _this$props = _this.props,
          isDisabled = _this$props.isDisabled,
          onClick = _this$props.onClick;


      if (isDisabled || typeof onClick !== 'function') return;

      var item = omit.apply(undefined, [_this.props].concat(_toConsumableArray(propsOmittedFromClickData)));

      onClick({ item: item, event: event });
    }, _this.setNode = function (ref) {
      _this.node = ref;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  // expose blur/focus to consumers via ref


  // disallow click on disabled avatars


  _createClass(AvatarItem, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          avatar = _props.avatar,
          enableTextTruncate = _props.enableTextTruncate,
          primaryText = _props.primaryText,
          secondaryText = _props.secondaryText;

      // maintain the illusion of a mask around presence/status

      var borderColor = getBackgroundColor(this.props);

      // distill props from context, props, and state
      var enhancedProps = getProps(this);

      // provide element type based on props
      var StyledComponent = getStyledAvatarItem(this.props);

      return React.createElement(
        StyledComponent,
        _extends({
          innerRef: this.setNode
        }, enhancedProps, {
          onClick: this.guardedClick
        }),
        cloneElement(avatar, { borderColor: borderColor }),
        React.createElement(
          Content,
          { truncate: enableTextTruncate },
          React.createElement(
            PrimaryText,
            { truncate: enableTextTruncate },
            primaryText
          ),
          React.createElement(
            SecondaryText,
            { truncate: enableTextTruncate },
            secondaryText
          )
        )
      );
    }
  }]);

  return AvatarItem;
}(Component);

AvatarItem.defaultProps = { enableTextTruncate: true };


export default withPseudoState(AvatarItem);