import _extends from 'babel-runtime/helpers/extends';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';

/* eslint-disable react/no-unused-prop-types, react/prop-types, react/sort-comp */

import React, { Component } from 'react';
import { Outer, Inner } from '../styled/MoreIndicator';
import { withPseudoState } from '../hoc';
import { getProps } from '../helpers';


var MAX_DISPLAY_COUNT = 99;

var MoreIndicator = function (_Component) {
  _inherits(MoreIndicator, _Component);

  function MoreIndicator() {
    _classCallCheck(this, MoreIndicator);

    return _possibleConstructorReturn(this, (MoreIndicator.__proto__ || _Object$getPrototypeOf(MoreIndicator)).apply(this, arguments));
  }

  _createClass(MoreIndicator, [{
    key: 'render',
    value: function render() {
      var count = this.props.count;

      var outerProps = getProps(this);
      var _props = this.props,
          appearance = _props.appearance,
          isActive = _props.isActive,
          isFocus = _props.isFocus,
          isHover = _props.isHover,
          size = _props.size;


      var innerProps = { appearance: appearance, isActive: isActive, isFocus: isFocus, isHover: isHover, size: size };
      var displayCount = count > MAX_DISPLAY_COUNT ? MAX_DISPLAY_COUNT : count;

      return React.createElement(
        Outer,
        _extends({}, outerProps, { isInteractive: true }),
        React.createElement(
          Inner,
          innerProps,
          '+',
          displayCount
        )
      );
    }
  }]);

  return MoreIndicator;
}(Component);

MoreIndicator.defaultProps = {
  appearance: 'circle'
};


export default withPseudoState(MoreIndicator);