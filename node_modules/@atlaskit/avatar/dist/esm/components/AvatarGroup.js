import _extends from 'babel-runtime/helpers/extends';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';

/* eslint-disable react/no-array-index-key */
import React, { Component } from 'react';
import { ThemeProvider } from 'styled-components';
import DropdownMenu, { DropdownItem, DropdownItemGroup } from '@atlaskit/dropdown-menu';
import Avatar from './Avatar';
import { Grid, Stack } from '../styled/AvatarGroup';
import MoreIndicator from '../components/MoreIndicator';

import itemTheme from '../theme/itemTheme';

var GROUP_COMPONENT = {
  grid: Grid,
  stack: Stack
};
var MAX_COUNT = {
  grid: 11,
  stack: 5
};

var AvatarGroup = function (_Component) {
  _inherits(AvatarGroup, _Component);

  function AvatarGroup() {
    _classCallCheck(this, AvatarGroup);

    return _possibleConstructorReturn(this, (AvatarGroup.__proto__ || _Object$getPrototypeOf(AvatarGroup)).apply(this, arguments));
  }

  _createClass(AvatarGroup, [{
    key: 'renderMoreDropdown',
    value: function renderMoreDropdown(max, total) {
      var _props = this.props,
          appearance = _props.appearance,
          data = _props.data,
          borderColor = _props.borderColor,
          onMoreClick = _props.onMoreClick,
          onAvatarClick = _props.onAvatarClick,
          size = _props.size,
          boundariesElement = _props.boundariesElement;

      // bail if there's not enough items

      if (total <= max) return null;

      // prepare the button -- we'll use it twice
      var MoreButton = function MoreButton(props) {
        return React.createElement(MoreIndicator, _extends({
          borderColor: borderColor,
          count: total - max,
          isInteractive: true,
          isStack: appearance === 'stack',
          size: size
        }, props));
      };

      // bail if the consumer wants to handle onClick
      if (typeof onMoreClick === 'function') {
        return React.createElement(MoreButton, { onClick: onMoreClick });
      }

      // crop and prepare the dropdown items
      var items = data.slice(max).map(function (avatar, index) {
        return React.createElement(
          DropdownItem,
          {
            elemBefore: React.createElement(Avatar, _extends({}, avatar, {
              borderColor: 'transparent',
              enableTooltip: false,
              size: 'small'
            })),
            href: avatar.href,
            key: index,
            onClick: onAvatarClick,
            rel: avatar.target ? 'noopener noreferrer' : null,
            target: avatar.target
          },
          avatar.name
        );
      });

      return React.createElement(
        DropdownMenu,
        {
          trigger: React.createElement(MoreButton, null),
          position: 'bottom right',
          boundariesElement: boundariesElement,
          shouldFlip: true
        },
        React.createElement(
          ThemeProvider,
          { theme: itemTheme },
          React.createElement(
            DropdownItemGroup,
            null,
            items
          )
        )
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          Item = _props2.avatar,
          appearance = _props2.appearance,
          borderColor = _props2.borderColor,
          data = _props2.data,
          maxCount = _props2.maxCount,
          onAvatarClick = _props2.onAvatarClick,
          size = _props2.size;
      // NOTE: conditionally defaulting the `maxCount` prop based on `appearance`

      var max = maxCount === 0 ? MAX_COUNT[appearance] : maxCount;
      var total = data.length;
      var Group = GROUP_COMPONENT[appearance];

      // Render (max - 1) avatars to leave space for moreIndicator
      var maxAvatar = total > max ? max - 1 : max;

      var items = data.slice(0, maxAvatar).map(function (avatar, idx) {
        return React.createElement(Item, _extends({}, avatar, {
          borderColor: borderColor,
          groupAppearance: appearance,
          index: idx,
          key: idx,
          onClick: avatar.onClick || onAvatarClick,
          size: size,
          stackIndex: max - idx
        }));
      });

      return React.createElement(
        Group,
        { size: size },
        items,
        this.renderMoreDropdown(+maxAvatar, total)
      );
    }
  }]);

  return AvatarGroup;
}(Component);

AvatarGroup.defaultProps = {
  appearance: 'stack',
  avatar: Avatar,
  maxCount: 0,
  size: 'medium'
};
export default AvatarGroup;