import _extends from 'babel-runtime/helpers/extends';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { Component } from 'react';
import { omit, getDisplayName } from '../utils';


var INTERNAL_HANDLERS = ['onBlur', 'onFocus', 'onKeyDown', 'onKeyUp', 'onMouseDown', 'onMouseEnter', 'onMouseLeave', 'onMouseUp'];

export default function withPseudoState(
// $FlowFixMe - this is not the correct way of typing this
WrappedComponent) {
  var _class, _temp2, _initialiseProps;

  return _temp2 = _class = function (_Component) {
    _inherits(ComponentWithPseudoState, _Component);

    function ComponentWithPseudoState() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, ComponentWithPseudoState);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ComponentWithPseudoState.__proto__ || _Object$getPrototypeOf(ComponentWithPseudoState)).call.apply(_ref, [this].concat(args))), _this), _initialiseProps.call(_this), _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(ComponentWithPseudoState, [{
      key: 'componentWillMount',
      value: function componentWillMount() {
        var _props = this.props,
            href = _props.href,
            isInteractive = _props.isInteractive,
            onClick = _props.onClick;


        if (href || isInteractive || onClick) {
          this.actionKeys = onClick || isInteractive ? ['Enter', ' '] : ['Enter'];
        }
      }

      // expose blur/focus to consumers via ref

    }, {
      key: 'render',
      value: function render() {
        var props = this.getProps();

        return React.createElement(WrappedComponent, _extends({ ref: this.setComponent }, this.state, props));
      }
    }]);

    return ComponentWithPseudoState;
  }(Component), _class.displayName = getDisplayName('withPseudoState', WrappedComponent), _initialiseProps = function _initialiseProps() {
    var _this2 = this;

    this.state = {
      isActive: Boolean(this.props.isActive),
      isFocus: Boolean(this.props.isActive),
      isHover: Boolean(this.props.isActive),
      isInteractive: Boolean(this.props.href || this.props.isInteractive || this.props.onClick)
    };

    this.blur = function () {
      if (_this2.component.blur) _this2.component.blur();
    };

    this.focus = function () {
      if (_this2.component.focus) _this2.component.focus();
    };

    this.setComponent = function (component) {
      _this2.component = component;
    };

    this.onBlur = function () {
      return _this2.setState({ isActive: false, isFocus: false });
    };

    this.onFocus = function () {
      return _this2.setState({ isFocus: true });
    };

    this.onMouseLeave = function () {
      return _this2.setState({ isActive: false, isHover: false });
    };

    this.onMouseEnter = function () {
      return _this2.setState({ isHover: true });
    };

    this.onMouseUp = function () {
      return _this2.setState({ isActive: false });
    };

    this.onMouseDown = function () {
      return _this2.setState({ isActive: true });
    };

    this.onKeyDown = function (event) {
      if (_this2.actionKeys.includes(event.key)) {
        _this2.setState({ isActive: true });
      }
    };

    this.onKeyUp = function (event) {
      if (_this2.actionKeys.includes(event.key)) {
        _this2.setState({ isActive: false });
      }
    };

    this.getProps = function () {
      var isInteractive = _this2.state.isInteractive;

      // strip the consumer's handlers off props, then merge with our handlers
      // if the element is interactive

      var props = omit.apply(undefined, [_this2.props].concat(INTERNAL_HANDLERS));

      var self = _this2;

      if (isInteractive) {
        INTERNAL_HANDLERS.forEach(function (handler) {
          if (_this2.props[handler]) {
            props[handler] = function () {
              var _props2;

              self[handler].apply(self, arguments);
              (_props2 = _this2.props)[handler].apply(_props2, arguments);
            };
          } else {
            props[handler] = self[handler];
          }
        });
      }

      return props;
    };
  }, _temp2;
}