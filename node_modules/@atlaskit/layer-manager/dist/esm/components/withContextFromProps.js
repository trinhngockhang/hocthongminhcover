import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _Object$keys from 'babel-runtime/core-js/object/keys';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { Component } from 'react';

var DefaultBaseComponent = function DefaultBaseComponent(props) {
  return React.createElement('div', props);
};

var withContextFromProps = function withContextFromProps(propTypes) {
  var BaseComponent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DefaultBaseComponent;

  var ContextProps = function (_Component) {
    _inherits(ContextProps, _Component);

    function ContextProps() {
      _classCallCheck(this, ContextProps);

      return _possibleConstructorReturn(this, (ContextProps.__proto__ || _Object$getPrototypeOf(ContextProps)).apply(this, arguments));
    }

    _createClass(ContextProps, [{
      key: 'getChildContext',
      value: function getChildContext() {
        var _this2 = this;

        var props = _Object$keys(propTypes).reduce(function (result, key) {
          // eslint-disable-next-line no-param-reassign
          if (key !== 'children') result[key] = _this2.props[key];

          return result;
        }, {});

        return props;
      }
    }, {
      key: 'render',
      value: function render() {
        var _props = this.props,
            children = _props.children,
            props = _objectWithoutProperties(_props, ['children']);

        if (BaseComponent !== null) {
          return React.createElement(
            BaseComponent,
            null,
            this.props.children
          );
        } else if (React.Children.count(children) === 1) {
          var onlyChild = children;
          // Hacky fix to work with TransitionGroup in withRenderTarget
          return React.Children.only(React.cloneElement(onlyChild, props));
        }
        throw Error('Only one child should exist when base component is null');
      }
    }]);

    return ContextProps;
  }(Component);

  ContextProps.displayName = 'withContextFromProps';
  ContextProps.childContextTypes = propTypes;

  return ContextProps;
};

export default withContextFromProps;