import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import { Component } from 'react';
import { findDOMNode } from 'react-dom';
import PropTypes from 'prop-types';

import FocusMarshal from './FocusMarshal';

// global focus marshal
var marshal = new FocusMarshal();

/* eslint-disable react/sort-comp */

var FocusLock = function (_Component) {
  _inherits(FocusLock, _Component);

  function FocusLock() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, FocusLock);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FocusLock.__proto__ || _Object$getPrototypeOf(FocusLock)).call.apply(_ref, [this].concat(args))), _this), _this.initFromProps = false, _this.teardownFromProps = false, _this.initialise = function () {
      var autoFocus = _this.props.autoFocus;


      _this.getBoundary();

      // set the element to hide from assistive technology
      _this.ariaHiddenNode = _this.props.ariaHiddenNode || _this.context.ariaHiddenNode;

      // accessible `popup` content
      if (_this.ariaHiddenNode) {
        _this.ariaHiddenNode.setAttribute('aria-hidden', '');
      }

      // register the boundary
      marshal.register({ autoFocus: autoFocus, boundary: _this.boundary });
    }, _this.teardown = function (options) {
      if (_this.ariaHiddenNode) {
        _this.ariaHiddenNode.removeAttribute('aria-hidden');
      }

      marshal.unregister(options);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(FocusLock, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var enabled = this.props.enabled;


      if (enabled || enabled === undefined) {
        this.initialise();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (!this.initFromProps && !this.teardownFromProps) {
        this.teardown({ shouldRestoreFocus: true });
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.enabled && nextProps.enabled !== this.props.enabled) {
        this.initFromProps = true;
        this.initialise();
      }

      if (!nextProps.enabled && nextProps.enabled !== this.props.enabled) {
        this.teardownFromProps = true;
        this.teardown({ shouldRestoreFocus: true });
      }
    }
  }, {
    key: 'getBoundary',
    value: function getBoundary() {
      // eslint-disable-next-line react/no-find-dom-node
      var boundary = findDOMNode(this);

      // findDOMNode's return type is `Element | Text | null`
      // This check keeps flow happy
      if (boundary instanceof HTMLElement) {
        this.boundary = boundary;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return this.props.children;
    }
  }]);

  return FocusLock;
}(Component);

FocusLock.defaultProps = {
  autoFocus: false
};
FocusLock.contextTypes = {
  /** available when invoked within @atlaskit/layer-manager */
  ariaHiddenNode: PropTypes.object
};
export default FocusLock;