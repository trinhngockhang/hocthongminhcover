import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import { Component } from 'react';
import PropTypes from 'prop-types';
import GatewayRegistry from './GatewayRegistry';

var Gateway = function (_Component) {
  _inherits(Gateway, _Component);

  function Gateway(props, context) {
    _classCallCheck(this, Gateway);

    var _this = _possibleConstructorReturn(this, (Gateway.__proto__ || _Object$getPrototypeOf(Gateway)).call(this, props, context));

    _this.id = '';

    _this.gatewayRegistry = context.gatewayRegistry;
    return _this;
  }

  _createClass(Gateway, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.id = this.gatewayRegistry.register(this.props.into, this.props.children);
      this.renderIntoGatewayNode(this.props);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      if (!props.shouldBlockRender) {
        this.gatewayRegistry.clearChild(this.props.into, this.id);
        this.renderIntoGatewayNode(props);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.gatewayRegistry.unregister(this.props.into, this.id);
    }
  }, {
    key: 'renderIntoGatewayNode',
    value: function renderIntoGatewayNode(props) {
      this.gatewayRegistry.addChild(this.props.into, this.id, props.children);
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }]);

  return Gateway;
}(Component);

Gateway.contextTypes = {
  gatewayRegistry: PropTypes.instanceOf(GatewayRegistry).isRequired
};
export default Gateway;