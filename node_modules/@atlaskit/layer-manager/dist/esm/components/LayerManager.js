import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import _taggedTemplateLiteral from 'babel-runtime/helpers/taggedTemplateLiteral';

var _templateObject = _taggedTemplateLiteral(['\n  position: relative;\n  z-index: 0;\n'], ['\n  position: relative;\n  z-index: 0;\n']);

import React, { Children, Component } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { TransitionGroup } from 'react-transition-group';
import { GatewayDest, GatewayProvider } from './gateway';

// NOTE: lock the app wrapper to a 0 z-index. This allows layer manager to
// render all gateways hierarchically, on top of the app, without needing
// incremental z-indexes.
var AppWrapper = styled.div(_templateObject);

var LayerManager = function (_Component) {
  _inherits(LayerManager, _Component);

  function LayerManager() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, LayerManager);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = LayerManager.__proto__ || _Object$getPrototypeOf(LayerManager)).call.apply(_ref, [this].concat(args))), _this), _this.state = { ariaHiddenNode: undefined }, _this.getAppRef = function (ref) {
      if (_this.state.ariaHiddenNode) return;

      _this.setState({ ariaHiddenNode: ref });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(LayerManager, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        ariaHiddenNode: this.state.ariaHiddenNode
      };
    }
  }, {
    key: 'render',
    value: function render() {
      var children = this.props.children;


      return React.createElement(
        GatewayProvider,
        null,
        React.createElement(
          AppWrapper,
          { innerRef: this.getAppRef },
          Children.only(children)
        ),
        React.createElement(GatewayDest, { name: 'modal', component: TransitionGroup }),
        React.createElement(GatewayDest, { name: 'spotlight', component: TransitionGroup }),
        React.createElement(GatewayDest, { name: 'flag' }),
        React.createElement(GatewayDest, { name: 'tooltip', component: TransitionGroup })
      );
    }
  }]);

  return LayerManager;
}(Component);

LayerManager.childContextTypes = { ariaHiddenNode: PropTypes.object };
export default LayerManager;