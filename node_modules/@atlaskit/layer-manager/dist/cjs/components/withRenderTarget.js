'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

exports.default = withRenderTarget;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _gateway = require('./gateway');

var _Portal = require('./Portal');

var _Portal2 = _interopRequireDefault(_Portal);

var _withContextFromProps = require('./withContextFromProps');

var _withContextFromProps2 = _interopRequireDefault(_withContextFromProps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function withRenderTarget(_ref, WrappedComponent) {
  var _class, _temp2;

  var target = _ref.target,
      withTransitionGroup = _ref.withTransitionGroup;

  // Access the analytics context types so we can provide them across portal boundaries
  // until we can support React 16 where it can be provided natively
  var analyticsContextTypes = {
    // Old analytics keys
    onAnalyticsEvent: _propTypes2.default.func,
    getParentAnalyticsData: _propTypes2.default.func,
    // New analytics-next keys,
    getAtlaskitAnalyticsContext: _propTypes2.default.func,
    getAtlaskitAnalyticsEventHandlers: _propTypes2.default.func
  };

  // These context types have been copied from jira-frontend to temporarily fix context issues for jira-frontend with other
  // layer-manager rendered components like flag - AK-4281
  var jiraContextTypes = {
    // For react-redux
    store: _propTypes2.default.object,
    // For react-intl
    intl: _propTypes2.default.object,
    // For common/analytics/analytics-provider
    triggerAnalytics: _propTypes2.default.func,
    // For portfolio/common/view-awesome/validation/form/connect-to-form
    internalFormContext: _propTypes2.default.object,
    // For board-v2/column/column-create/column-create-form
    validateColumn: _propTypes2.default.func,
    // For board-v2/column/column-header/column-header
    createColumnMenu: _propTypes2.default.func,
    // For board-v2/column/draggable-column/draggable-column
    getScrollTop: _propTypes2.default.func,
    // For board/view/components/done-issues-button/done-issues-button
    configuration: _propTypes2.default.object,
    // For board/view/components/drag-handle/drag-handle
    getDraggableOriginCenterPos: _propTypes2.default.func,
    // For board/view/components/drag-handle/drag-handle
    getDraggableTranslatedCenterPos: _propTypes2.default.func,
    // For common/components/profilecard/profilecard-view
    akProfileClient: _propTypes2.default.object,
    // For common/components/profilecard/profilecard-view
    cloudId: _propTypes2.default.string,
    // For common/engagement/with-engagement
    subscribeEngagementState: _propTypes2.default.func,
    // For navigation/view/navigation-group-item/index
    perfMetricsStart: _propTypes2.default.func,
    // For navigation/view/onboarding/components/onboarding-manager
    spotlightRegistry: _propTypes2.default.object,
    // For navigation/view/project-header/index
    slideRight: _propTypes2.default.func,
    // For portfolio/common/view/components/tree-table/view/details/index
    consumerStore: _propTypes2.default.object,
    // For portfolio/page-plan/view-awesome/main/planning/schedule/schedule/lane/bar/index-dumb
    onBarSelected: _propTypes2.default.func
  };

  var portalledContextTypes = (0, _extends3.default)({}, analyticsContextTypes, jiraContextTypes);

  var ContextProvider = (0, _withContextFromProps2.default)(portalledContextTypes, null);

  // eslint-disable-next-line react/prefer-stateless-function
  return _temp2 = _class = function (_Component) {
    (0, _inherits3.default)(_class, _Component);

    function _class() {
      var _ref2;

      var _temp, _this, _ret;

      (0, _classCallCheck3.default)(this, _class);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref2 = _class.__proto__ || (0, _getPrototypeOf2.default)(_class)).call.apply(_ref2, [this].concat(args))), _this), _this.getWrappedComponentRef = function (ref) {
        _this.gatewayOrPortalChildRef = ref;
      }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
    }

    (0, _createClass3.default)(_class, [{
      key: 'render',
      value: function render() {
        var _context = this.context,
            gatewayRegistry = _context.gatewayRegistry,
            portalledContext = (0, _objectWithoutProperties3.default)(_context, ['gatewayRegistry']);

        var GatewayOrPortal = gatewayRegistry ? _gateway.Gateway : _Portal2.default;

        return _react2.default.createElement(
          GatewayOrPortal,
          {
            id: process.env.NODE_ENV === 'test' ? 'gateway-or-portal' : '',
            into: target,
            withTransitionGroup: withTransitionGroup,
            shouldBlockRender: this.context.blockChildGatewayRender
          },
          _react2.default.createElement(
            ContextProvider,
            portalledContext,
            _react2.default.createElement(WrappedComponent, (0, _extends3.default)({
              ref: this.getWrappedComponentRef
            }, this.props))
          )
        );
      }
    }]);
    return _class;
  }(_react.Component), _class.contextTypes = (0, _extends3.default)({
    gatewayRegistry: _propTypes2.default.instanceOf(_gateway.GatewayRegistry),
    blockChildGatewayRender: _propTypes2.default.bool
  }, analyticsContextTypes, jiraContextTypes), _temp2;
}