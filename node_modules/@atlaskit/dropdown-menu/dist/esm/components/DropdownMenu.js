import _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { Component } from 'react';
import StatelessMenu from './DropdownMenuStateless';

var DropdownMenu = function (_Component) {
  _inherits(DropdownMenu, _Component);

  function DropdownMenu() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, DropdownMenu);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DropdownMenu.__proto__ || _Object$getPrototypeOf(DropdownMenu)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      isOpen: _this.props.defaultOpen,
      items: [].concat(_toConsumableArray(_this.props.items))
    }, _this.findActivatedGroup = function (item) {
      return _this.state.items.filter(function (group) {
        return group.items.indexOf(item) > -1;
      })[0];
    }, _this.handleItemActivation = function (attrs) {
      var activatedItem = attrs.item;
      var activatedGroup = _this.findActivatedGroup(activatedItem);
      var items = [].concat(_toConsumableArray(_this.state.items));

      switch (activatedItem.type) {
        case 'checkbox':
          activatedItem.isChecked = !activatedItem.isChecked;
          _this.props.onItemActivated({ item: activatedItem });
          _this.setState({ items: items });
          break;
        case 'radio':
          activatedGroup.items.forEach(function (i) {
            if (i === activatedItem) {
              i.isChecked = true; // eslint-disable-line no-param-reassign
            } else {
              i.isChecked = false; // eslint-disable-line no-param-reassign
            }
          });
          _this.props.onItemActivated({ item: activatedItem });
          _this.setState({ items: items });
          break;
        case 'link':
        default:
          _this.props.onItemActivated({ item: activatedItem });
          _this.close();
          break;
      }
    }, _this.handleOpenChange = function (attrs) {
      _this.setState({ isOpen: attrs.isOpen });
      _this.props.onOpenChange(attrs);
    }, _this.close = function () {
      _this.setState({ isOpen: false });
      _this.props.onOpenChange({ isOpen: false });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  } // eslint-disable-line react/sort-comp

  _createClass(DropdownMenu, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.items !== this.state.items) {
        this.setState({ items: [].concat(_toConsumableArray(nextProps.items)) });
      }
      if (nextProps.isOpen !== this.props.isOpen) {
        this.setState({ isOpen: nextProps.isOpen });
      }
    } // eslint-disable-line

  }, {
    key: 'render',
    value: function render() {
      var isOpen = this.state.isOpen;
      var _props = this.props,
          appearance = _props.appearance,
          boundariesElement = _props.boundariesElement,
          children = _props.children,
          isLoading = _props.isLoading,
          items = _props.items,
          position = _props.position,
          shouldAllowMultilineItems = _props.shouldAllowMultilineItems,
          shouldFitContainer = _props.shouldFitContainer,
          shouldFlip = _props.shouldFlip,
          trigger = _props.trigger,
          triggerButtonProps = _props.triggerButtonProps,
          triggerType = _props.triggerType;


      return React.createElement(
        StatelessMenu,
        {
          appearance: appearance,
          boundariesElement: boundariesElement,
          isOpen: isOpen,
          isLoading: isLoading,
          items: items,
          onItemActivated: this.handleItemActivation,
          onOpenChange: this.handleOpenChange,
          position: position,
          shouldAllowMultilineItems: shouldAllowMultilineItems,
          shouldFitContainer: shouldFitContainer,
          shouldFlip: shouldFlip,
          trigger: trigger,
          triggerButtonProps: triggerButtonProps,
          triggerType: triggerType
        },
        children
      );
    }
  }]);

  return DropdownMenu;
}(Component);

DropdownMenu.defaultProps = {
  appearance: 'default',
  boundariesElement: 'viewport',
  defaultOpen: false,
  isLoading: false,
  isOpen: false,
  items: [],
  onItemActivated: function onItemActivated() {},
  onOpenChange: function onOpenChange() {},
  position: 'bottom left',
  shouldAllowMultilineItems: false,
  shouldFitContainer: false,
  shouldFlip: true,
  triggerButtonProps: {},
  triggerType: 'default'
};
export default DropdownMenu;