'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _arrayFind = require('array-find');

var _arrayFind2 = _interopRequireDefault(_arrayFind);

var _contextNamespace = require('../../util/contextNamespace');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isItemInList = function isItemInList(itemList, itemId, groupId) {
  return Boolean((0, _arrayFind2.default)(itemList, function (item) {
    return item.id === itemId && item.groupId === groupId;
  }));
};

var DropdownItemSelectionCache = function (_Component) {
  (0, _inherits3.default)(DropdownItemSelectionCache, _Component);

  function DropdownItemSelectionCache() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, DropdownItemSelectionCache);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = DropdownItemSelectionCache.__proto__ || (0, _getPrototypeOf2.default)(DropdownItemSelectionCache)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      lastCacheUpdate: 0
    }, _this.selectedItems = [], _this.alreadyDefaultedItems = [], _this.handleItemSelectionsChanged = function (groupId, newGroupSelections) {
      var newSelectedItems = [].concat((0, _toConsumableArray3.default)(_this.selectedItems.filter(function (item) {
        return item.groupId !== groupId;
      })), (0, _toConsumableArray3.default)(newGroupSelections));

      _this.selectedItems = newSelectedItems;

      // We store selectedItems in an instance variable (this.selectedItems) instead of state,
      // because if multiple children update the cache at the same time it causes unexpected
      // behaviour due to the asynchronous behaviour of setState. So we need to trigger setState
      // with a different value to cause the children to be updated with their new selection values.
      _this.setState({ lastCacheUpdate: Date.now() });
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  // Need to store selectedItemValues in state rather than component instance property
  // to ensure that re-render happens down the tree via context when selectedItemValues
  // is updated.
  // eslint-disable-line react/sort-comp

  // If any radio/checkbox items have defaultSelected applied, we need to keep track of whether
  // each of those items has had it's state set to 'selected'. This is because when the dropdown
  // menu is closed and then opened again, all of the radio/checkbox items re-mount so they
  // try to again apply their defaultSelected status. defaultSelected should only be applied on
  // the initial mount, as users can change the value post-mount. Alternatively, products can use
  // the isSelected prop with the onClick handler to control the selected state manually if needed.


  (0, _createClass3.default)(DropdownItemSelectionCache, [{
    key: 'getChildContext',
    // eslint-disable-line react/sort-comp

    value: function getChildContext() {
      var _this2 = this;

      return (0, _defineProperty3.default)({}, _contextNamespace.selectionCacheContext, {
        // This function returns true/false describing whether the supplied navigation item
        // (which must have a unique item and group ID) is currently selected - this is used
        // by radio and checkbox dropdown items to retreive their 'selected' state when they
        // re-mount, which happens when the dropdown is closed and then re-opened.
        isItemSelected: function isItemSelected(groupId, itemId) {
          return isItemInList(_this2.selectedItems, itemId, groupId);
        },
        itemsInGroup: function itemsInGroup(groupId) {
          return _this2.selectedItems.filter(function (item) {
            return item.groupId === groupId;
          });
        },
        itemSelectionsChanged: this.handleItemSelectionsChanged,
        hasItemAlreadyHadDefaultSelectedApplied: function hasItemAlreadyHadDefaultSelectedApplied(groupId, itemId) {
          return isItemInList(_this2.alreadyDefaultedItems, itemId, groupId);
        },
        markItemAsDefaultApplied: function markItemAsDefaultApplied(groupId, itemId) {
          _this2.alreadyDefaultedItems.push({ id: itemId, groupId: groupId });
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        null,
        this.props.children
      );
    }
  }]);
  return DropdownItemSelectionCache;
}(_react.Component);

DropdownItemSelectionCache.childContextTypes = (0, _defineProperty3.default)({}, _contextNamespace.selectionCacheContext, _propTypes2.default.shape({
  isItemSelected: _propTypes2.default.func,
  itemsInGroup: _propTypes2.default.func,
  itemSelectionsChanged: _propTypes2.default.func
}));
exports.default = DropdownItemSelectionCache;