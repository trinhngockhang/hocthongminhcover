'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _contextNamespace = require('../../util/contextNamespace');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DropdownItemSelectionManager = function (_Component) {
  (0, _inherits3.default)(DropdownItemSelectionManager, _Component);

  function DropdownItemSelectionManager() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, DropdownItemSelectionManager);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = DropdownItemSelectionManager.__proto__ || (0, _getPrototypeOf2.default)(DropdownItemSelectionManager)).call.apply(_ref, [this].concat(args))), _this), _this.setItemSelected = function (itemId, isSelected, defaultSelected) {
      var _this$props = _this.props,
          behavior = _this$props.behavior,
          groupId = _this$props.groupId;


      var setSelected = function setSelected(finalBool) {
        if (behavior === 'checkbox' || behavior === 'menuitemcheckbox') {
          _this.setCheckboxItemSelected(itemId, finalBool);
        } else if (behavior === 'radio' || behavior === 'menuitemradio') {
          _this.setRadioItemSelected(itemId, finalBool);
        }
      };

      // If a radio or checkbox item has defaultSelected set on it, that it will try to set its
      // selected state to true each time it mounts (which happens whenever the dropdown is re-
      // opened by the user. The following check makes sure that the defaultSelected behaviour
      // only applies on the first mount of the radio/checkbox.

      if (typeof isSelected === 'boolean') {
        // If isSelected is explicitly provided, set it to that
        setSelected(isSelected);
      } else if (defaultSelected) {
        if (!_this.hasAlreadyAppliedDefaultSelected(itemId)) {
          // If using defaultSelected and this is first mount, select the item
          setSelected(true);
          _this.context[_contextNamespace.selectionCacheContext].markItemAsDefaultApplied(groupId, itemId);
        } else {
          // If using defaultSelected and not first mount, set isSelected to cached value
          setSelected(_this.isItemSelectedInCache(itemId));
        }
      } else {
        setSelected(_this.isItemSelectedInCache(itemId));
      }
    }, _this.setCheckboxItemSelected = function (itemId, isSelected) {
      var cache = _this.context[_contextNamespace.selectionCacheContext];

      var alreadySelected = cache.itemsInGroup(_this.props.groupId);
      var isAlreadySelected = cache.isItemSelected(_this.props.groupId, itemId);
      if (isSelected && !isAlreadySelected) {
        _this.updateCacheContextWithSelections([].concat((0, _toConsumableArray3.default)(alreadySelected), [{ id: itemId, groupId: _this.props.groupId }]));
      } else if (!isSelected && isAlreadySelected) {
        var withoutCurrentItem = alreadySelected.filter(function (item) {
          return item.id !== itemId;
        });
        _this.updateCacheContextWithSelections(withoutCurrentItem);
      }
    }, _this.setRadioItemSelected = function (itemId, isSelected) {
      var cache = _this.context[_contextNamespace.selectionCacheContext];

      var isAlreadySelected = cache.isItemSelected(_this.props.groupId, itemId);
      if (isAlreadySelected && !isSelected) {
        _this.updateCacheContextWithSelections([]);
      } else if (!isAlreadySelected && isSelected) {
        _this.updateCacheContextWithSelections([{ id: itemId, groupId: _this.props.groupId }]);
      }
    }, _this.isItemSelectedInCache = function (itemId) {
      return _this.context[_contextNamespace.selectionCacheContext].isItemSelected(_this.props.groupId, itemId);
    }, _this.handleItemClicked = function (clickedItemId) {
      var behavior = _this.props.behavior;


      if (behavior === 'checkbox' || behavior === 'menuitemcheckbox') {
        _this.handleCheckboxItemClicked(clickedItemId);
      } else if (behavior === 'radio' || behavior === 'menuitemradio') {
        _this.handleRadioItemClicked(clickedItemId);
      }
    }, _this.hasAlreadyAppliedDefaultSelected = function (itemId) {
      return _this.context[_contextNamespace.selectionCacheContext].hasItemAlreadyHadDefaultSelectedApplied(_this.props.groupId, itemId);
    }, _this.handleCheckboxItemClicked = function (clickedItemId) {
      var cache = _this.context[_contextNamespace.selectionCacheContext];

      var itemsInGroup = cache.itemsInGroup(_this.props.groupId);

      var newSelections = cache.isItemSelected(_this.props.groupId, clickedItemId) ? itemsInGroup.filter(function (item) {
        return item.id !== clickedItemId;
      }) : [].concat((0, _toConsumableArray3.default)(itemsInGroup), [{ id: clickedItemId, groupId: _this.props.groupId }]);

      _this.updateCacheContextWithSelections(newSelections);
    }, _this.handleRadioItemClicked = function (clickedItemId) {
      _this.updateCacheContextWithSelections([{ id: clickedItemId, groupId: _this.props.groupId }]);
    }, _this.updateCacheContextWithSelections = function (itemSelections) {
      _this.context[_contextNamespace.selectionCacheContext].itemSelectionsChanged(_this.props.groupId, itemSelections);
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(DropdownItemSelectionManager, [{
    key: 'getChildContext',
    value: function getChildContext() {
      var _this2 = this;

      return (0, _defineProperty3.default)({}, _contextNamespace.selectionManagerContext, {
        isItemSelected: function isItemSelected(itemId) {
          return _this2.context[_contextNamespace.selectionCacheContext].isItemSelected(_this2.props.groupId, itemId);
        },
        itemClicked: this.handleItemClicked,
        setItemSelected: this.setItemSelected
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        null,
        this.props.children
      );
    }
  }]);
  return DropdownItemSelectionManager;
}(_react.Component);

DropdownItemSelectionManager.childContextTypes = (0, _defineProperty3.default)({}, _contextNamespace.selectionManagerContext, _propTypes2.default.object);
DropdownItemSelectionManager.contextTypes = (0, _defineProperty3.default)({}, _contextNamespace.selectionCacheContext, _propTypes2.default.object.isRequired);
exports.default = DropdownItemSelectionManager;