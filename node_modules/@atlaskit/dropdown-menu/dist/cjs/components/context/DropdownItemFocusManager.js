'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _contextNamespace = require('../../util/contextNamespace');

var _keys = require('../../util/keys');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DropdownItemFocusManager = function (_Component) {
  (0, _inherits3.default)(DropdownItemFocusManager, _Component);

  function DropdownItemFocusManager() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, DropdownItemFocusManager);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = DropdownItemFocusManager.__proto__ || (0, _getPrototypeOf2.default)(DropdownItemFocusManager)).call.apply(_ref, [this].concat(args))), _this), _this.registeredItems = [], _this.handleItemRegistered = function (itemId, itemNode) {
      _this.registeredItems.push({ itemId: itemId, itemNode: itemNode });

      if (_this.props.autoFocus && _this.registeredItems.length === 1) {
        _this.focusedItemId = itemId;
        itemNode.focus();
      }
    }, _this.handleItemDeregistered = function (itemId) {
      _this.registeredItems = _this.registeredItems.filter(function (item) {
        return item.itemId !== itemId;
      });
    }, _this.handleItemFocused = function (itemId) {
      _this.focusedItemId = itemId;
    }, _this.handleItemUpdated = function (itemId, itemNode) {
      var matchingIndex = -1;
      for (var i = 0; i < _this.registeredItems.length; i++) {
        if (_this.registeredItems[i].itemId === itemId) {
          matchingIndex = i;
          break;
        }
      }

      if (matchingIndex === -1) {
        _this.handleItemRegistered(itemId, itemNode);
        return;
      }

      _this.registeredItems[matchingIndex].itemNode = itemNode;
      if (_this.focusedItemIndex() === matchingIndex) {
        itemNode.focus();
      }
    }, _this.focusedItemIndex = function () {
      var _this2 = _this,
          focusedItemId = _this2.focusedItemId,
          registeredItems = _this2.registeredItems;

      for (var i = 0; i < registeredItems.length; i++) {
        if (registeredItems[i].itemId === focusedItemId) {
          return i;
        }
      }
      return -1;
    }, _this.handleKeyboard = function (event) {
      var key = event.key,
          shiftKey = event.shiftKey;

      var focusedItemIndex = _this.focusedItemIndex();
      if (key === _keys.KEY_UP || key === _keys.KEY_DOWN) {
        // We prevent default here to avoid page scrolling when up/down
        // pressed while dropdown is focused.
        event.preventDefault();

        if (focusedItemIndex < 0) {
          return;
        }

        var nextItemIndex = key === _keys.KEY_UP ? Math.max(0, focusedItemIndex - 1) : Math.min(_this.registeredItems.length - 1, focusedItemIndex + 1);
        _this.registeredItems[nextItemIndex].itemNode.focus();
      }

      if (key === _keys.KEY_TAB) {
        if (!shiftKey && focusedItemIndex === _this.registeredItems.length - 1) {
          if (_this.props.close) _this.props.close({ event: event, source: 'keydown' });
        }

        if (shiftKey && focusedItemIndex === 0) {
          if (_this.props.close) _this.props.close({ event: event, source: 'keydown' });
        }
      }
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(DropdownItemFocusManager, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return (0, _defineProperty3.default)({}, _contextNamespace.focusManagerContext, {
        itemFocused: this.handleItemFocused,
        registerItem: this.handleItemRegistered,
        deregisterItem: this.handleItemDeregistered,
        updateItem: this.handleItemUpdated
      });
    }
  }, {
    key: 'render',
    value: function render() {
      // eslint-disable-next-line jsx-a11y/no-static-element-interactions
      return _react2.default.createElement(
        'div',
        { onKeyDown: this.handleKeyboard },
        this.props.children
      );
    }
  }]);
  return DropdownItemFocusManager;
}(_react.Component);

DropdownItemFocusManager.childContextTypes = (0, _defineProperty3.default)({}, _contextNamespace.focusManagerContext, _propTypes2.default.object);
exports.default = DropdownItemFocusManager;