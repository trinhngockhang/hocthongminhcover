'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _v = require('uuid/v1');

var _v2 = _interopRequireDefault(_v);

var _button = require('@atlaskit/button');

var _button2 = _interopRequireDefault(_button);

var _droplist = require('@atlaskit/droplist');

var _droplist2 = _interopRequireDefault(_droplist);

var _chevronDown = require('@atlaskit/icon/glyph/chevron-down');

var _chevronDown2 = _interopRequireDefault(_chevronDown);

var _DropdownItemFocusManager = require('./context/DropdownItemFocusManager');

var _DropdownItemFocusManager2 = _interopRequireDefault(_DropdownItemFocusManager);

var _DropdownItemClickManager = require('./context/DropdownItemClickManager');

var _DropdownItemClickManager2 = _interopRequireDefault(_DropdownItemClickManager);

var _DropdownItemSelectionCache = require('./context/DropdownItemSelectionCache');

var _DropdownItemSelectionCache2 = _interopRequireDefault(_DropdownItemSelectionCache);

var _WidthConstrainer = require('../styled/WidthConstrainer');

var _WidthConstrainer2 = _interopRequireDefault(_WidthConstrainer);

var _keys = require('../util/keys');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DropdownMenuStateless = function (_Component) {
  (0, _inherits3.default)(DropdownMenuStateless, _Component);

  function DropdownMenuStateless() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, DropdownMenuStateless);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = DropdownMenuStateless.__proto__ || (0, _getPrototypeOf2.default)(DropdownMenuStateless)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      id: (0, _v2.default)()
    }, _this.componentDidMount = function () {
      if (_this.isUsingDeprecatedAPI()) {
        if (process.env.NODE_ENV !== 'test' && process.env.NODE_ENV !== 'production') {
          // eslint-disable-next-line no-console
          console.log('DropdownMenu.items is deprecated. Please switch to the declarative API.');
        }

        if (_this.domItemsList) {
          _this.focusFirstItem();
        }
      }
    }, _this.componentDidUpdate = function (prevProp) {
      if (_this.isUsingDeprecatedAPI() && _this.props.isOpen && !prevProp.isOpen) {
        _this.focusFirstItem();
      }
    }, _this.getNextFocusable = function (indexItem, available) {
      if (!_this.domItemsList) {
        return null;
      }

      var currentItem = typeof indexItem !== 'number' ? -1 : indexItem;
      var latestAvailable = typeof available !== 'number' ? currentItem : available;

      if (currentItem < _this.domItemsList.length - 1) {
        currentItem++;

        if (_this.domItemsList[currentItem].getAttribute('aria-hidden') !== 'true') {
          return currentItem;
        }

        return _this.getNextFocusable(currentItem, latestAvailable);
      }

      return latestAvailable;
    }, _this.getPrevFocusable = function (indexItem, available) {
      if (!_this.domItemsList) {
        return null;
      }

      var currentItem = typeof indexItem !== 'number' ? -1 : indexItem;
      var latestAvailable = typeof available !== 'number' ? currentItem : available;

      if (currentItem && currentItem > 0) {
        currentItem--;

        if (_this.domItemsList[currentItem].getAttribute('aria-hidden') !== 'true') {
          return currentItem;
        }

        return _this.getPrevFocusable(currentItem, latestAvailable);
      }

      return latestAvailable || currentItem;
    }, _this.focusFirstItem = function () {
      if (_this.sourceOfIsOpen === 'keydown') {
        _this.focusItem(_this.getNextFocusable());
      }
    }, _this.focusNextItem = function () {
      _this.focusItem(_this.getNextFocusable(_this.focusedItem));
    }, _this.focusPreviousItem = function () {
      _this.focusItem(_this.getPrevFocusable(_this.focusedItem));
    }, _this.focusItem = function (index) {
      if (!_this.domItemsList || !index) {
        return;
      }

      _this.focusedItem = index;
      _this.domItemsList[_this.focusedItem].focus();
    }, _this.isTargetChildItem = function (target) {
      if (!target) return false;

      var isDroplistItem = target.getAttribute('data-role') === 'droplistItem';

      // eslint-disable-next-line react/no-find-dom-node
      var thisDom = (0, _reactDom.findDOMNode)(_this);
      return isDroplistItem && thisDom ? thisDom.contains(target) : false;
    }, _this.handleKeyboardInteractionForClosed = function (event) {
      if (_this.props.isOpen) {
        return;
      }

      switch (event.key) {
        case _keys.KEY_DOWN:
        case _keys.KEY_SPACE:
        case _keys.KEY_ENTER:
          event.preventDefault();
          _this.open({ event: event, source: 'keydown' });
          break;
        default:
          break;
      }
    }, _this.handleKeyboardInteractionsDeprecated = function (event) {
      // KeyboardEvent.target is typed as an EventTarget but we need to access methods on it which
      // are specific to Element. Due limitations of the HTML spec flow doesn't know that an
      // EventTarget can have these methods, so we cast it to Element through Object. This is the
      // safest thing we can do in this situation.
      var target = event.target;
      if (_this.props.isOpen) {
        if (_this.isTargetChildItem(target)) {
          switch (event.key) {
            case 'ArrowUp':
              event.preventDefault();
              _this.focusPreviousItem();
              break;
            case 'ArrowDown':
              event.preventDefault();
              _this.focusNextItem();
              break;
            case 'Tab':
              event.preventDefault();
              _this.close({ event: event });
              break;
            default:
              break;
          }
        } else if (event.key === 'ArrowDown') {
          _this.sourceOfIsOpen = 'keydown';
          _this.focusFirstItem();
        } else if (event.key === 'Tab') {
          _this.close({ event: event });
        }
      } else {
        switch (event.key) {
          case _keys.KEY_DOWN:
          case _keys.KEY_SPACE:
          case _keys.KEY_ENTER:
            event.preventDefault();
            _this.open({ event: event, source: 'keydown' });
            break;
          default:
            break;
        }
      }
    }, _this.handleClickDeprecated = function (event) {
      var menuContainer = _this.domMenuContainer;
      // Casting target to Element. See comment in `handleKeyboardInteractionsDeprecated`.
      var target = event.target;
      if (!menuContainer || menuContainer && !menuContainer.contains(target)) {
        _this.toggle({ source: 'click', event: event });
      }
    }, _this.isUsingDeprecatedAPI = function () {
      return Boolean(_this.props.items.length);
    }, _this.handleClick = function (event) {
      if (_this.isUsingDeprecatedAPI()) {
        _this.handleClickDeprecated(event);
        return;
      }

      var _this2 = _this,
          triggerContainer = _this2.triggerContainer;
      // Casting target to Element. See comment in `handleKeyboardInteractionsDeprecated`.

      var target = event.target;
      if (triggerContainer && triggerContainer.contains(target) && target.disabled !== true) {
        var isOpen = _this.props.isOpen;

        _this.sourceOfIsOpen = 'mouse';
        _this.props.onOpenChange({ isOpen: !isOpen, event: event });
      }
    }, _this.triggerContent = function () {
      var _this$props = _this.props,
          children = _this$props.children,
          trigger = _this$props.trigger,
          isOpen = _this$props.isOpen,
          triggerButtonProps = _this$props.triggerButtonProps,
          triggerType = _this$props.triggerType;

      var insideTriggerContent = _this.isUsingDeprecatedAPI() ? children : trigger;

      if (triggerType !== 'button') {
        return insideTriggerContent;
      }

      var triggerProps = (0, _extends3.default)({}, triggerButtonProps);
      var defaultButtonProps = {
        ariaControls: _this.state.id,
        ariaExpanded: isOpen,
        ariaHaspopup: true,
        isSelected: isOpen
      };
      if (!triggerProps.iconAfter && !triggerProps.iconBefore) {
        triggerProps.iconAfter = _react2.default.createElement(_chevronDown2.default, { size: 'medium', label: '' });
      }
      return _react2.default.createElement(
        _button2.default,
        (0, _extends3.default)({}, defaultButtonProps, triggerProps),
        insideTriggerContent
      );
    }, _this.open = function (attrs) {
      _this.sourceOfIsOpen = attrs.source;
      _this.props.onOpenChange({ isOpen: true, event: attrs.event });
    }, _this.close = function (attrs) {
      _this.sourceOfIsOpen = null;
      _this.props.onOpenChange({ isOpen: false, event: attrs.event });
    }, _this.toggle = function (attrs) {
      if (attrs.source === 'keydown') return;

      if (_this.props.isOpen) {
        _this.close(attrs);
      } else {
        _this.open(attrs);
      }
    }, _this.handleItemClicked = function (event) {
      _this.props.onOpenChange({ isOpen: false, event: event });
    }, _this.renderTrigger = function () {
      var triggerContent = _this.triggerContent();
      return _this.isUsingDeprecatedAPI() ? triggerContent : _react2.default.createElement(
        'div',
        {
          ref: function ref(_ref2) {
            _this.triggerContainer = _ref2;
          }
        },
        triggerContent
      );
    }, _this.renderItems = function (items) {
      return items.map(function (item, itemIndex) {
        return _react2.default.createElement(
          _droplist.Item,
          (0, _extends3.default)({}, item, {
            key: itemIndex,
            onActivate: function onActivate(_ref3) {
              var event = _ref3.event;

              _this.props.onItemActivated({ item: item, event: event });
            }
          }),
          item.content
        );
      });
    }, _this.renderGroups = function (groups) {
      return groups.map(function (group, groupIndex) {
        return _react2.default.createElement(
          _droplist.Group,
          {
            heading: group.heading,
            elemAfter: group.elemAfter,
            key: groupIndex
          },
          _this.renderItems(group.items)
        );
      });
    }, _this.renderDeprecated = function () {
      var _this$props2 = _this.props,
          items = _this$props2.items,
          shouldFitContainer = _this$props2.shouldFitContainer;
      var id = _this.state.id;


      return _react2.default.createElement(
        'div',
        {
          id: id,
          ref: function ref(_ref4) {
            _this.domMenuContainer = _ref4;
            _this.domItemsList = _ref4 ? _ref4.querySelectorAll('[data-role="droplistItem"]') : null;
          },
          role: 'menu',
          style: shouldFitContainer ? null : { maxWidth: 300 }
        },
        _this.renderGroups(items)
      );
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(DropdownMenuStateless, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          appearance = _props.appearance,
          boundariesElement = _props.boundariesElement,
          children = _props.children,
          isLoading = _props.isLoading,
          isOpen = _props.isOpen,
          onOpenChange = _props.onOpenChange,
          position = _props.position,
          shouldAllowMultilineItems = _props.shouldAllowMultilineItems,
          shouldFitContainer = _props.shouldFitContainer,
          shouldFlip = _props.shouldFlip;
      var id = this.state.id;

      var isDeprecated = this.isUsingDeprecatedAPI();

      var deprecatedProps = isDeprecated ? {
        onKeyDown: this.handleKeyboardInteractionsDeprecated,
        shouldAllowMultilineItems: shouldAllowMultilineItems
      } : {
        onKeyDown: this.handleKeyboardInteractionForClosed
      };

      return _react2.default.createElement(
        _DropdownItemSelectionCache2.default,
        null,
        _react2.default.createElement(
          _droplist2.default,
          (0, _extends3.default)({
            appearance: appearance,
            boundariesElement: boundariesElement,
            isLoading: isLoading,
            isOpen: isOpen,
            onClick: this.handleClick,
            onOpenChange: onOpenChange,
            position: position,
            shouldFitContainer: shouldFitContainer,
            shouldFlip: shouldFlip,
            trigger: this.renderTrigger()
          }, deprecatedProps),
          isDeprecated ? this.renderDeprecated() : _react2.default.createElement(
            _WidthConstrainer2.default,
            {
              id: id,
              role: 'menu',
              shouldFitContainer: shouldFitContainer
            },
            _react2.default.createElement(
              _DropdownItemClickManager2.default,
              { onItemClicked: this.handleItemClicked },
              _react2.default.createElement(
                _DropdownItemFocusManager2.default,
                {
                  autoFocus: this.sourceOfIsOpen === 'keydown',
                  close: this.close
                },
                children
              )
            )
          )
        )
      );
    }
  }]);
  return DropdownMenuStateless;
}(_react.Component);
/* eslint-disable react/no-array-index-key */


DropdownMenuStateless.defaultProps = {
  appearance: 'default',
  boundariesElement: 'viewport',
  isLoading: false,
  isOpen: false,
  items: [],
  onItemActivated: function onItemActivated() {},
  onOpenChange: function onOpenChange() {},
  position: 'bottom left',
  shouldAllowMultilineItems: false,
  shouldFitContainer: false,
  shouldFlip: true,
  triggerButtonProps: {},
  triggerType: 'default'
};
exports.default = DropdownMenuStateless;