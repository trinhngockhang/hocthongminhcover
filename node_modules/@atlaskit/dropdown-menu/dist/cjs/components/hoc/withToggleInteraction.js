'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _theme = require('@atlaskit/theme');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _getDisplayName = require('../../util/getDisplayName');

var _getDisplayName2 = _interopRequireDefault(_getDisplayName);

var _safeContextCall = require('../../util/safeContextCall');

var _safeContextCall2 = _interopRequireDefault(_safeContextCall);

var _contextNamespace = require('../../util/contextNamespace');

var _keys = require('../../util/keys');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// HOC that typically wraps @atlaskit/item
var withToggleInteraction = function withToggleInteraction(WrappedComponent, SelectionIcon, ariaRole) {
  var WithToggleInteraction = function (_Component) {
    (0, _inherits3.default)(WithToggleInteraction, _Component);

    function WithToggleInteraction() {
      var _ref;

      var _temp, _this, _ret;

      (0, _classCallCheck3.default)(this, WithToggleInteraction);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = WithToggleInteraction.__proto__ || (0, _getPrototypeOf2.default)(WithToggleInteraction)).call.apply(_ref, [this].concat(args))), _this), _this.getIconColors = function () {
        var isSelected = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        if (isSelected) {
          return { primary: _theme.colors.B400, secondary: _theme.colors.N40 };
        }
        return { primary: _theme.colors.N40, secondary: _theme.colors.N40 };
      }, _this.warnIfUseControlledAndUncontrolledState = function () {
        if (process.env.NODE_ENV !== 'production') {
          if (_this.props.defaultSelected && _this.props.isSelected) {
            // eslint-disable-next-line no-console
            console.warn('DropdownItem defaultSelected and isSelected props should not be used at the same time.');
          }
        }
      }, _this.callContextFn = (0, _safeContextCall2.default)(_this, _contextNamespace.selectionManagerContext), _this.handleKeyboard = function (event) {
        var key = event.key;

        if (key === _keys.KEY_ENTER || key === _keys.KEY_SPACE) {
          // We prevent default here to avoid page scroll
          event.preventDefault();

          _this.handleItemActivated(event);
        }
      }, _this.handleItemActivated = function (event) {
        if (_this.props.onClick) {
          _this.props.onClick(event);
        }
        _this.callContextFn('itemClicked', _this.props.id);
      }, _this.isSelectedInDropdown = function () {
        return _this.callContextFn('isItemSelected', _this.props.id);
      }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
    }

    (0, _createClass3.default)(WithToggleInteraction, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        var _props = this.props,
            defaultSelected = _props.defaultSelected,
            isSelected = _props.isSelected,
            id = _props.id;

        this.warnIfUseControlledAndUncontrolledState();

        this.callContextFn('setItemSelected', id, isSelected, defaultSelected);
      }
    }, {
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(nextProps) {
        var id = nextProps.id,
            defaultSelected = nextProps.defaultSelected,
            isSelected = nextProps.isSelected;

        if (this.props.isSelected !== isSelected) {
          this.callContextFn('setItemSelected', id, isSelected, defaultSelected);
        }
      }
    }, {
      key: 'render',
      value: function render() {
        var _props2 = this.props,
            children = _props2.children,
            otherProps = (0, _objectWithoutProperties3.default)(_props2, ['children']);

        var isSelected = this.isSelectedInDropdown();
        var iconColors = this.getIconColors(isSelected);

        return _react2.default.createElement(
          WrappedComponent,
          (0, _extends3.default)({}, otherProps, {
            role: ariaRole,
            'aria-checked': isSelected,
            isSelected: isSelected,
            onClick: this.handleItemActivated,
            onKeyDown: this.handleKeyboard,
            elemBefore: _react2.default.createElement(SelectionIcon, {
              primaryColor: iconColors.primary,
              secondaryColor: iconColors.secondary,
              size: 'medium',
              label: ''
            })
          }),
          children
        );
      }
    }]);
    return WithToggleInteraction;
  }(_react.Component);

  WithToggleInteraction.defaultProps = {
    onClick: function onClick() {}
  };
  WithToggleInteraction.contextTypes = (0, _defineProperty3.default)({}, _contextNamespace.selectionManagerContext, _propTypes2.default.object.isRequired);

  WithToggleInteraction.displayName = 'WithToggleInteraction(' + (0, _getDisplayName2.default)(WrappedComponent) + ')';
  return WithToggleInteraction;
};

exports.default = withToggleInteraction;