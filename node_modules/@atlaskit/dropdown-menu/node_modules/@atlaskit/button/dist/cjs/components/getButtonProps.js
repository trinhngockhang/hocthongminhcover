'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

require('./Button');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getAppearanceProps = function getAppearanceProps(props, state) {
  var appearance = props.appearance,
      className = props.className,
      isDisabled = props.isDisabled,
      isSelected = props.isSelected,
      spacing = props.spacing,
      shouldFitContainer = props.shouldFitContainer;
  var isActive = state.isActive,
      isFocus = state.isFocus,
      isHover = state.isHover;


  return {
    appearance: appearance,
    className: className,
    disabled: isDisabled,
    isActive: isActive,
    isFocus: isFocus,
    isHover: isHover,
    isSelected: isSelected,
    spacing: spacing,
    fit: shouldFitContainer
  };
};


var getInteractionProps = function getInteractionProps(component) {
  var onBlur = component.onBlur,
      onFocus = component.onFocus,
      onMouseDown = component.onMouseDown,
      onMouseEnter = component.onMouseEnter,
      onMouseLeave = component.onMouseLeave,
      onMouseUp = component.onMouseUp;
  var _component$props = component.props,
      onClick = _component$props.onClick,
      tabIndex = _component$props.tabIndex;


  return {
    onBlur: onBlur,
    onClick: onClick,
    onFocus: onFocus,
    onMouseDown: onMouseDown,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    onMouseUp: onMouseUp,
    tabIndex: tabIndex
  };
};

var getLinkElementProps = function getLinkElementProps(props) {
  var href = props.href,
      target = props.target;


  return { href: href, target: target };
};

var getButtonElementProps = function getButtonElementProps(props) {
  var ariaHaspopup = props.ariaHaspopup,
      ariaExpanded = props.ariaExpanded,
      ariaControls = props.ariaControls,
      form = props.form,
      type = props.type;


  return {
    'aria-haspopup': ariaHaspopup,
    'aria-expanded': ariaExpanded,
    'aria-controls': ariaControls,
    form: form,
    type: type
  };
};

var getButtonProps = function getButtonProps(component) {
  var props = component.props,
      state = component.state;


  var defaultProps = (0, _extends3.default)({
    id: props.id
  }, getAppearanceProps(props, state), getInteractionProps(component));

  if (props.component) {
    return (0, _extends3.default)({}, props, defaultProps);
  }

  if (props.href) {
    if (props.isDisabled) {
      return defaultProps;
    }

    return (0, _extends3.default)({}, defaultProps, getLinkElementProps(props));
  }

  return (0, _extends3.default)({}, defaultProps, getButtonElementProps(props));
};

exports.default = getButtonProps;