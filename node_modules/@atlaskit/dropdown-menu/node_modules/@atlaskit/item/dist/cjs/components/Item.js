'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Item = require('../styled/Item');

var _Item2 = _interopRequireDefault(_Item);

var _ItemParts = require('../styled/ItemParts');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Item = function (_Component) {
  (0, _inherits3.default)(Item, _Component);

  function Item(props) {
    (0, _classCallCheck3.default)(this, Item);

    // The type of element rendered at the root of render() can vary based on the `href`
    // and `linkComponent` props provided. We generate this component here to avoid re-
    // generating the component inside render(). This is for performance reasons, and also
    // allows us to avoid generating a new `ref` for the root element each render().
    var _this = (0, _possibleConstructorReturn3.default)(this, (Item.__proto__ || (0, _getPrototypeOf2.default)(Item)).call(this, props));

    _this.setRef = function (ref) {
      _this.ref = ref;
    };

    _this.href = function () {
      return _this.props.isDisabled ? null : _this.props.href;
    };

    _this.rootComponent = (0, _Item2.default)({
      href: _this.href(),
      linkComponent: props.linkComponent
    });
    return _this;
  }
  // eslint-disable-next-line react/sort-comp


  (0, _createClass3.default)(Item, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.ref && this.props.autoFocus) {
        this.ref.focus();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          onClick = _props.onClick,
          onKeyDown = _props.onKeyDown,
          isCompact = _props.isCompact,
          isDisabled = _props.isDisabled,
          isDragging = _props.isDragging,
          isHidden = _props.isHidden,
          isSelected = _props.isSelected,
          onMouseEnter = _props.onMouseEnter,
          onMouseLeave = _props.onMouseLeave,
          role = _props.role,
          dnd = _props.dnd,
          otherProps = (0, _objectWithoutProperties3.default)(_props, ['onClick', 'onKeyDown', 'isCompact', 'isDisabled', 'isDragging', 'isHidden', 'isSelected', 'onMouseEnter', 'onMouseLeave', 'role', 'dnd']);
      var Root = this.rootComponent;

      var dragHandleProps = dnd && dnd.dragHandleProps || null;

      var patchedEventHandlers = {
        onClick: function (_onClick) {
          function onClick(_x) {
            return _onClick.apply(this, arguments);
          }

          onClick.toString = function () {
            return _onClick.toString();
          };

          return onClick;
        }(function (event) {
          var original = function original() {
            if (!isDisabled && onClick) {
              onClick(event);
            }
          };

          if (!dragHandleProps || !dragHandleProps.onClick) {
            original();
            return;
          }

          // Drag and drop has its own disabled mechansim
          // So not checking for isDisabled
          dragHandleProps.onClick(event);

          // if default is prevent - do not fire the onClick prop
          if (event.defaultPrevented) {
            return;
          }

          original();
        }),
        onMouseDown: function onMouseDown(event) {
          if (dragHandleProps && dragHandleProps.onMouseDown) {
            dragHandleProps.onMouseDown(event);
          }

          // We want to prevent the item from getting focus when clicked
          event.preventDefault();
        },
        onKeyDown: function (_onKeyDown) {
          function onKeyDown(_x2) {
            return _onKeyDown.apply(this, arguments);
          }

          onKeyDown.toString = function () {
            return _onKeyDown.toString();
          };

          return onKeyDown;
        }(function (event) {
          var original = function original() {
            if (!isDisabled && onKeyDown) {
              onKeyDown(event);
            }
          };

          if (!dragHandleProps || !dragHandleProps.onKeyDown) {
            original();
            return;
          }

          dragHandleProps.onKeyDown(event);

          // if default is prevent - do not fire other handlers
          if (event.defaultPrevented) {
            return;
          }

          // not allowing keyboard events on the element while dragging
          if (isDragging) {
            return;
          }

          original();
        })
      };

      var patchedInnerRef = function patchedInnerRef(ref) {
        _this2.setRef(ref);

        if (dnd && dnd.innerRef) {
          dnd.innerRef(ref);
        }
      };

      return _react2.default.createElement(
        Root,
        (0, _extends3.default)({
          'aria-disabled': isDisabled,
          href: this.href(),
          isCompact: isCompact,
          isDisabled: isDisabled,
          isDragging: isDragging,
          isHidden: isHidden,
          isSelected: isSelected,
          onMouseEnter: onMouseEnter,
          onMouseLeave: onMouseLeave,
          role: role,
          tabIndex: isDisabled || isHidden || this.props.href ? null : 0,
          target: this.props.target,
          title: this.props.title,
          innerRef: patchedInnerRef
        }, dnd && dnd.draggableProps, dragHandleProps, patchedEventHandlers, otherProps),
        !!this.props.elemBefore && _react2.default.createElement(
          _ItemParts.Before,
          { isCompact: isCompact },
          this.props.elemBefore
        ),
        _react2.default.createElement(
          _ItemParts.ContentWrapper,
          null,
          _react2.default.createElement(
            _ItemParts.Content,
            { allowMultiline: this.props.shouldAllowMultiline },
            this.props.children
          ),
          !!this.props.description && _react2.default.createElement(
            _ItemParts.Description,
            {
              isCompact: this.props.isCompact,
              isDisabled: this.props.isDisabled
            },
            this.props.description
          )
        ),
        !!this.props.elemAfter && _react2.default.createElement(
          _ItemParts.After,
          { isCompact: isCompact },
          this.props.elemAfter
        )
      );
    }
  }]);
  return Item;
}(_react.Component);

Item.defaultProps = {
  autoFocus: false,
  description: '',
  isCompact: false,
  isDisabled: false,
  isHidden: false,
  role: 'button',
  shouldAllowMultiline: false
};
exports.default = Item;