'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _AnalyticsEvent2 = require('./AnalyticsEvent');

var _AnalyticsEvent3 = _interopRequireDefault(_AnalyticsEvent2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _console = console,
    warn = _console.warn;

var UIAnalyticsEvent = function (_AnalyticsEvent) {
  (0, _inherits3.default)(UIAnalyticsEvent, _AnalyticsEvent);

  function UIAnalyticsEvent(props) {
    (0, _classCallCheck3.default)(this, UIAnalyticsEvent);

    var _this = (0, _possibleConstructorReturn3.default)(this, (UIAnalyticsEvent.__proto__ || (0, _getPrototypeOf2.default)(UIAnalyticsEvent)).call(this, props));

    _this.clone = function () {
      if (_this.hasFired) {
        warn("Cannot clone an event after it's been fired.");
        return null;
      }
      var context = [].concat((0, _toConsumableArray3.default)(_this.context));
      var handlers = [].concat((0, _toConsumableArray3.default)(_this.handlers));

      // We stringify and parse here to get a hacky "deep clone" of the object.
      // This has some limitations in that it wont support functions, regexs, Maps, Sets, etc,
      // but none of those need to be represented in our payload, so we consider this fine
      var payload = JSON.parse((0, _stringify2.default)(_this.payload));

      return new UIAnalyticsEvent({ context: context, handlers: handlers, payload: payload });
    };

    _this.fire = function (channel) {
      if (_this.hasFired) {
        warn('Cannot fire an event twice.');
        return;
      }
      _this.handlers.forEach(function (handler) {
        handler(_this, channel);
      });
      _this.hasFired = true;
    };

    _this.context = props.context || [];
    _this.handlers = props.handlers || [];
    _this.hasFired = false;
    return _this;
  }

  (0, _createClass3.default)(UIAnalyticsEvent, [{
    key: 'update',
    value: function update(updater) {
      if (this.hasFired) {
        warn("Cannot update an event after it's been fired.");
        return this;
      }
      return (0, _get3.default)(UIAnalyticsEvent.prototype.__proto__ || (0, _getPrototypeOf2.default)(UIAnalyticsEvent.prototype), 'update', this).call(this, updater);
    }
  }]);
  return UIAnalyticsEvent;
}(_AnalyticsEvent3.default);

exports.default = UIAnalyticsEvent;