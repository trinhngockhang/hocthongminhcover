'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var AnalyticsEvent = function () {
  function AnalyticsEvent(props) {
    var _this = this;

    (0, _classCallCheck3.default)(this, AnalyticsEvent);

    this.clone = function () {
      // We stringify and parse here to get a hacky "deep clone" of the object.
      // This has some limitations in that it wont support functions, regexs, Maps, Sets, etc,
      // but none of those need to be represented in our payload, so we consider this fine
      var payload = JSON.parse((0, _stringify2.default)(_this.payload));

      return new AnalyticsEvent({ payload: payload });
    };

    this.payload = props.payload;
  }

  (0, _createClass3.default)(AnalyticsEvent, [{
    key: 'update',
    value: function update(updater) {
      if (typeof updater === 'function') {
        this.payload = updater(this.payload);
      } else if ((typeof updater === 'undefined' ? 'undefined' : (0, _typeof3.default)(updater)) === 'object') {
        this.payload = (0, _extends3.default)({}, this.payload, updater);
      }

      return this;
    }
  }]);
  return AnalyticsEvent;
}();

exports.default = AnalyticsEvent;