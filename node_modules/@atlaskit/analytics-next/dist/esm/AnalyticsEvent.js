import _extends from 'babel-runtime/helpers/extends';
import _typeof from 'babel-runtime/helpers/typeof';
import _JSON$stringify from 'babel-runtime/core-js/json/stringify';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';

var AnalyticsEvent = function () {
  function AnalyticsEvent(props) {
    var _this = this;

    _classCallCheck(this, AnalyticsEvent);

    this.clone = function () {
      // We stringify and parse here to get a hacky "deep clone" of the object.
      // This has some limitations in that it wont support functions, regexs, Maps, Sets, etc,
      // but none of those need to be represented in our payload, so we consider this fine
      var payload = JSON.parse(_JSON$stringify(_this.payload));

      return new AnalyticsEvent({ payload: payload });
    };

    this.payload = props.payload;
  }

  _createClass(AnalyticsEvent, [{
    key: 'update',
    value: function update(updater) {
      if (typeof updater === 'function') {
        this.payload = updater(this.payload);
      } else if ((typeof updater === 'undefined' ? 'undefined' : _typeof(updater)) === 'object') {
        this.payload = _extends({}, this.payload, updater);
      }

      return this;
    }
  }]);

  return AnalyticsEvent;
}();

export default AnalyticsEvent;