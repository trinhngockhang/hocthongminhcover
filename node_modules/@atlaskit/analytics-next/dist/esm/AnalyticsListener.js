import _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import { Children, Component } from 'react';
import PropTypes from 'prop-types';
import UIAnalyticsEvent from './UIAnalyticsEvent';


var ContextTypes = {
  getAtlaskitAnalyticsEventHandlers: PropTypes.func
};

var AnalyticsListener = function (_Component) {
  _inherits(AnalyticsListener, _Component);

  function AnalyticsListener() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, AnalyticsListener);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = AnalyticsListener.__proto__ || _Object$getPrototypeOf(AnalyticsListener)).call.apply(_ref, [this].concat(args))), _this), _this.getChildContext = function () {
      return {
        getAtlaskitAnalyticsEventHandlers: _this.getAnalyticsEventHandlers
      };
    }, _this.getAnalyticsEventHandlers = function () {
      var _this$props = _this.props,
          channel = _this$props.channel,
          onEvent = _this$props.onEvent;
      var getAtlaskitAnalyticsEventHandlers = _this.context.getAtlaskitAnalyticsEventHandlers;

      var parentEventHandlers = typeof getAtlaskitAnalyticsEventHandlers === 'function' && getAtlaskitAnalyticsEventHandlers() || [];
      var handler = function handler(event, eventChannel) {
        if (channel === '*' || channel === eventChannel) {
          onEvent(event, eventChannel);
        }
      };
      return [handler].concat(_toConsumableArray(parentEventHandlers));
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(AnalyticsListener, [{
    key: 'render',
    value: function render() {
      return Children.only(this.props.children);
    }
  }]);

  return AnalyticsListener;
}(Component);

AnalyticsListener.contextTypes = ContextTypes;
AnalyticsListener.childContextTypes = ContextTypes;
export default AnalyticsListener;