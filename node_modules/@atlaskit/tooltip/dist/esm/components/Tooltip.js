import _extends from 'babel-runtime/helpers/extends';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';

/* eslint-disable react/require-default-props */

import React, { Children, Component } from 'react';
import renamePropsWithWarning from 'react-deprecate';

import { Tooltip as StyledTooltip } from '../styled';

import Portal from './Portal';
import TooltipMarshal from './Marshal';
import Transition from './Transition';
import { getPosition } from './utils';

// global tooltip marshall
var marshall = new TooltipMarshal();

function getInitialState(props) {
  return {
    immediatelyHide: false,
    immediatelyShow: false,
    isVisible: false,
    isFlipped: false,
    position: props.position,
    coordinates: null
  };
}

/* eslint-disable react/sort-comp */
var Tooltip = function (_Component) {
  _inherits(Tooltip, _Component);

  function Tooltip() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Tooltip);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Tooltip.__proto__ || _Object$getPrototypeOf(Tooltip)).call.apply(_ref, [this].concat(args))), _this), _this.state = getInitialState(_this.props), _this.handleWrapperRef = function (ref) {
      _this.wrapper = ref;
    }, _this.handleMeasureRef = function (tooltip) {
      if (!tooltip || !_this.wrapper) return;

      var position = _this.props.position;

      var target = _this.wrapper.children.length ? _this.wrapper.children[0] : _this.wrapper;

      // NOTE getPosition returns:
      // position Enum(top | left | bottom | right)
      //   - adjusted for edge collision
      // coordinates: Object(left: number, top: number)
      //   - coordinates passed to Transition
      _this.setState(getPosition({ position: position, target: target, tooltip: tooltip }));
    }, _this.show = function (_ref2) {
      var immediate = _ref2.immediate;

      _this.setState({
        immediatelyShow: immediate,
        isVisible: true,
        coordinates: null
      });
    }, _this.hide = function (_ref3) {
      var immediate = _ref3.immediate;

      // Update state twice to allow for the updated `immediate` prop to pass through
      // to the Transition component before the tooltip is removed
      _this.setState({ immediatelyHide: immediate }, function () {
        _this.setState({ isVisible: false, coordinates: null });
      });
    }, _this.handleMouseOver = function (event) {
      var onMouseOver = _this.props.onMouseOver;

      // bail if over the wrapper, we only want to target the first child.

      if (event.target === _this.wrapper) return;

      marshall.show(_this);

      if (onMouseOver) onMouseOver(event);
    }, _this.handleMouseOut = function (event) {
      var onMouseOut = _this.props.onMouseOut;

      // bail if over the wrapper, we only want to target the first child.

      if (event.target === _this.wrapper) return;

      marshall.hide(_this);

      if (onMouseOut) onMouseOut(event);
    }, _this.handleClick = function () {
      var hideTooltipOnClick = _this.props.hideTooltipOnClick;


      if (hideTooltipOnClick) _this.hide({ immediate: true });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Tooltip, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var position = nextProps.position,
          truncate = nextProps.truncate;

      // handle case where position is changed while visible

      if (position !== this.props.position) {
        this.setState({ position: position, coordinates: null });
      }

      // handle case where truncate is changed while visible
      if (truncate !== this.props.truncate) {
        this.setState({ coordinates: null });
      }
    }
  }, {
    key: 'renderTooltip',
    value: function renderTooltip() {
      var _props = this.props,
          content = _props.content,
          truncate = _props.truncate,
          component = _props.component;
      var _state = this.state,
          immediatelyHide = _state.immediatelyHide,
          immediatelyShow = _state.immediatelyShow,
          isVisible = _state.isVisible,
          position = _state.position,
          coordinates = _state.coordinates;

      // bail immediately when not visible, or when there is no content

      if (!isVisible || !content) return null;

      // render node for measuring in alternate tree via portal
      if (!coordinates) {
        var MeasurableTooltip = component;
        return React.createElement(
          Portal,
          null,
          React.createElement(
            MeasurableTooltip,
            {
              innerRef: this.handleMeasureRef,
              style: { visibility: 'hidden' }
            },
            content
          )
        );
      }

      // render and animate tooltip when coordinates available
      var transitionProps = {
        component: component,
        immediatelyHide: immediatelyHide,
        immediatelyShow: immediatelyShow,
        position: position,
        coordinates: coordinates,
        truncate: truncate
      };
      return React.createElement(
        Transition,
        transitionProps,
        content
      );
    }
  }, {
    key: 'render',
    value: function render() {
      // NOTE removing props from rest:
      // - `content` is a valid HTML attribute, but has a different semantic meaning
      // - `component` is NOT valid and react will warn
      // - `hideTooltipOnClick` is NOT valid and react will warn
      // - `position` is NOT valid and react will warn
      // - `truncate` is NOT valid and react will warn
      // eslint-disable-next-line no-unused-vars
      var _props2 = this.props,
          children = _props2.children,
          component = _props2.component,
          content = _props2.content,
          hideTooltipOnClick = _props2.hideTooltipOnClick,
          position = _props2.position,
          truncate = _props2.truncate,
          Tag = _props2.tag,
          rest = _objectWithoutProperties(_props2, ['children', 'component', 'content', 'hideTooltipOnClick', 'position', 'truncate', 'tag']);

      return React.createElement(
        Tag,
        _extends({
          onClick: this.handleClick,
          onMouseOver: this.handleMouseOver,
          onMouseOut: this.handleMouseOut,
          ref: this.handleWrapperRef
        }, rest),
        Children.only(children),
        this.renderTooltip()
      );
    }
  }]);

  return Tooltip;
}(Component);

Tooltip.defaultProps = {
  component: StyledTooltip,
  position: 'bottom',
  tag: 'div'
};


export default renamePropsWithWarning(Tooltip, {
  description: 'content'
});