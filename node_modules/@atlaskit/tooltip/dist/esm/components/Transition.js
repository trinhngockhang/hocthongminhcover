import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';

/* eslint-disable react/prefer-stateless-function */

import React, { Component } from 'react';
import { withRenderTarget } from '@atlaskit/layer-manager';
import { Slide } from './Animation';

var Tip = function (_Component) {
  _inherits(Tip, _Component);

  function Tip() {
    _classCallCheck(this, Tip);

    return _possibleConstructorReturn(this, (Tip.__proto__ || _Object$getPrototypeOf(Tip)).apply(this, arguments));
  }

  _createClass(Tip, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          component = _props.component,
          coordinates = _props.coordinates,
          immediatelyHide = _props.immediatelyHide,
          immediatelyShow = _props.immediatelyShow,
          position = _props.position,
          truncate = _props.truncate;

      // NOTE: `props.in` is NOT public API

      var transitionIn = this.props.in;

      return React.createElement(
        Slide,
        {
          component: component,
          immediatelyHide: immediatelyHide,
          immediatelyShow: immediatelyShow,
          'in': transitionIn,
          position: position,
          style: coordinates,
          truncate: truncate
        },
        children
      );
    }
  }]);

  return Tip;
}(Component);

export default withRenderTarget({
  target: 'tooltip',
  withTransitionGroup: true
},
// $FlowFixMe TEMPORARY
Tip);